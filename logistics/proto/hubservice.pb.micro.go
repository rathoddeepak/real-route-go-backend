// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: hubservice.proto

package justify

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for HubService service

func NewHubServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for HubService service

type HubService interface {
	//Hub Methods
	CreateHub(ctx context.Context, in *CreateHubRequest, opts ...client.CallOption) (*CreateHubResponse, error)
	UpdateHub(ctx context.Context, in *UpdateHubRequest, opts ...client.CallOption) (*UpdateHubResponse, error)
	UpdateHubLocation(ctx context.Context, in *UpdateHubLocationRequest, opts ...client.CallOption) (*UpdateHubResponse, error)
	UpdateHubStatus(ctx context.Context, in *UpdateHubStatusRequest, opts ...client.CallOption) (*UpdateHubResponse, error)
	GetHubsOfCity(ctx context.Context, in *GetHubRequest, opts ...client.CallOption) (*GetHubsResponse, error)
	GetHubsOfUser(ctx context.Context, in *GetHubRequest, opts ...client.CallOption) (*GetHubsResponse, error)
	GetHubById(ctx context.Context, in *GetHubRequest, opts ...client.CallOption) (*GetHubResponse, error)
	//Category Methods
	CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...client.CallOption) (*CreateCategoryResponse, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...client.CallOption) (*UpdateCategoryResponse, error)
	UpdateCategoryStatus(ctx context.Context, in *UpdateCategoryStatusRequest, opts ...client.CallOption) (*UpdateCategoryResponse, error)
	GetHubCategories(ctx context.Context, in *GetCategoryRequest, opts ...client.CallOption) (*GetCategoriesResponse, error)
	UpdateCategoryImage(ctx context.Context, in *UpdateCategoryImageRequest, opts ...client.CallOption) (*UpdateCategoryResponse, error)
	GetCategoryById(ctx context.Context, in *GetCategoryRequest, opts ...client.CallOption) (*GetCategoryResponse, error)
	//Sub Category Methods
	CreateSubCategory(ctx context.Context, in *CreateSubCategoryRequest, opts ...client.CallOption) (*CreateSubCategoryResponse, error)
	UpdateSubCategory(ctx context.Context, in *UpdateSubCategoryRequest, opts ...client.CallOption) (*UpdateSubCategoryResponse, error)
	UpdateSubCategoryStatus(ctx context.Context, in *UpdateSubCategoryStatusRequest, opts ...client.CallOption) (*UpdateSubCategoryResponse, error)
	UpdateSubCategoryImage(ctx context.Context, in *UpdateSubCategoryImageRequest, opts ...client.CallOption) (*UpdateSubCategoryResponse, error)
	GetSubCategoriesOfCategory(ctx context.Context, in *GetSubCategoryRequest, opts ...client.CallOption) (*GetSubCategoriesResponse, error)
	GetSubCategoryById(ctx context.Context, in *GetSubCategoryRequest, opts ...client.CallOption) (*GetSubCategoryResponse, error)
	//Product Methods
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...client.CallOption) (*CreateProductResponse, error)
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...client.CallOption) (*UpdateProductResponse, error)
	UpdateProductStatus(ctx context.Context, in *UpdateProductStatusRequest, opts ...client.CallOption) (*UpdateProductResponse, error)
	UpdateProductQty(ctx context.Context, in *UpdateProductQtyRequest, opts ...client.CallOption) (*UpdateProductResponse, error)
	UpdateProductImage(ctx context.Context, in *UpdateProductImageRequest, opts ...client.CallOption) (*UpdateProductResponse, error)
	GetProductsOfCategory(ctx context.Context, in *GetProductRequest, opts ...client.CallOption) (*GetProductsResponse, error)
	NormalSearchProducts(ctx context.Context, in *ProductSearchRequest, opts ...client.CallOption) (*NormalProductSearchResponse, error)
	GetProductsOfSubCategory(ctx context.Context, in *GetProductRequest, opts ...client.CallOption) (*GetProductsResponse, error)
	GetProductById(ctx context.Context, in *GetProductRequest, opts ...client.CallOption) (*GetProductResponse, error)
	//Combined Methods
	SearchProducts(ctx context.Context, in *ProductSearchRequest, opts ...client.CallOption) (*ProductSearchResponse, error)
	HubInitData(ctx context.Context, in *HubInitRequest, opts ...client.CallOption) (*HubInitResponse, error)
}

type hubService struct {
	c    client.Client
	name string
}

func NewHubService(name string, c client.Client) HubService {
	return &hubService{
		c:    c,
		name: name,
	}
}

func (c *hubService) CreateHub(ctx context.Context, in *CreateHubRequest, opts ...client.CallOption) (*CreateHubResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.CreateHub", in)
	out := new(CreateHubResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) UpdateHub(ctx context.Context, in *UpdateHubRequest, opts ...client.CallOption) (*UpdateHubResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.UpdateHub", in)
	out := new(UpdateHubResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) UpdateHubLocation(ctx context.Context, in *UpdateHubLocationRequest, opts ...client.CallOption) (*UpdateHubResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.UpdateHubLocation", in)
	out := new(UpdateHubResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) UpdateHubStatus(ctx context.Context, in *UpdateHubStatusRequest, opts ...client.CallOption) (*UpdateHubResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.UpdateHubStatus", in)
	out := new(UpdateHubResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) GetHubsOfCity(ctx context.Context, in *GetHubRequest, opts ...client.CallOption) (*GetHubsResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.GetHubsOfCity", in)
	out := new(GetHubsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) GetHubsOfUser(ctx context.Context, in *GetHubRequest, opts ...client.CallOption) (*GetHubsResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.GetHubsOfUser", in)
	out := new(GetHubsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) GetHubById(ctx context.Context, in *GetHubRequest, opts ...client.CallOption) (*GetHubResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.GetHubById", in)
	out := new(GetHubResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...client.CallOption) (*CreateCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.CreateCategory", in)
	out := new(CreateCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...client.CallOption) (*UpdateCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.UpdateCategory", in)
	out := new(UpdateCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) UpdateCategoryStatus(ctx context.Context, in *UpdateCategoryStatusRequest, opts ...client.CallOption) (*UpdateCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.UpdateCategoryStatus", in)
	out := new(UpdateCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) GetHubCategories(ctx context.Context, in *GetCategoryRequest, opts ...client.CallOption) (*GetCategoriesResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.GetHubCategories", in)
	out := new(GetCategoriesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) UpdateCategoryImage(ctx context.Context, in *UpdateCategoryImageRequest, opts ...client.CallOption) (*UpdateCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.UpdateCategoryImage", in)
	out := new(UpdateCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) GetCategoryById(ctx context.Context, in *GetCategoryRequest, opts ...client.CallOption) (*GetCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.GetCategoryById", in)
	out := new(GetCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) CreateSubCategory(ctx context.Context, in *CreateSubCategoryRequest, opts ...client.CallOption) (*CreateSubCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.CreateSubCategory", in)
	out := new(CreateSubCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) UpdateSubCategory(ctx context.Context, in *UpdateSubCategoryRequest, opts ...client.CallOption) (*UpdateSubCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.UpdateSubCategory", in)
	out := new(UpdateSubCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) UpdateSubCategoryStatus(ctx context.Context, in *UpdateSubCategoryStatusRequest, opts ...client.CallOption) (*UpdateSubCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.UpdateSubCategoryStatus", in)
	out := new(UpdateSubCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) UpdateSubCategoryImage(ctx context.Context, in *UpdateSubCategoryImageRequest, opts ...client.CallOption) (*UpdateSubCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.UpdateSubCategoryImage", in)
	out := new(UpdateSubCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) GetSubCategoriesOfCategory(ctx context.Context, in *GetSubCategoryRequest, opts ...client.CallOption) (*GetSubCategoriesResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.GetSubCategoriesOfCategory", in)
	out := new(GetSubCategoriesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) GetSubCategoryById(ctx context.Context, in *GetSubCategoryRequest, opts ...client.CallOption) (*GetSubCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.GetSubCategoryById", in)
	out := new(GetSubCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...client.CallOption) (*CreateProductResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.CreateProduct", in)
	out := new(CreateProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...client.CallOption) (*UpdateProductResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.UpdateProduct", in)
	out := new(UpdateProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) UpdateProductStatus(ctx context.Context, in *UpdateProductStatusRequest, opts ...client.CallOption) (*UpdateProductResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.UpdateProductStatus", in)
	out := new(UpdateProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) UpdateProductQty(ctx context.Context, in *UpdateProductQtyRequest, opts ...client.CallOption) (*UpdateProductResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.UpdateProductQty", in)
	out := new(UpdateProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) UpdateProductImage(ctx context.Context, in *UpdateProductImageRequest, opts ...client.CallOption) (*UpdateProductResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.UpdateProductImage", in)
	out := new(UpdateProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) GetProductsOfCategory(ctx context.Context, in *GetProductRequest, opts ...client.CallOption) (*GetProductsResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.GetProductsOfCategory", in)
	out := new(GetProductsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) NormalSearchProducts(ctx context.Context, in *ProductSearchRequest, opts ...client.CallOption) (*NormalProductSearchResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.NormalSearchProducts", in)
	out := new(NormalProductSearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) GetProductsOfSubCategory(ctx context.Context, in *GetProductRequest, opts ...client.CallOption) (*GetProductsResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.GetProductsOfSubCategory", in)
	out := new(GetProductsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) GetProductById(ctx context.Context, in *GetProductRequest, opts ...client.CallOption) (*GetProductResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.GetProductById", in)
	out := new(GetProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) SearchProducts(ctx context.Context, in *ProductSearchRequest, opts ...client.CallOption) (*ProductSearchResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.SearchProducts", in)
	out := new(ProductSearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubService) HubInitData(ctx context.Context, in *HubInitRequest, opts ...client.CallOption) (*HubInitResponse, error) {
	req := c.c.NewRequest(c.name, "HubService.HubInitData", in)
	out := new(HubInitResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HubService service

type HubServiceHandler interface {
	//Hub Methods
	CreateHub(context.Context, *CreateHubRequest, *CreateHubResponse) error
	UpdateHub(context.Context, *UpdateHubRequest, *UpdateHubResponse) error
	UpdateHubLocation(context.Context, *UpdateHubLocationRequest, *UpdateHubResponse) error
	UpdateHubStatus(context.Context, *UpdateHubStatusRequest, *UpdateHubResponse) error
	GetHubsOfCity(context.Context, *GetHubRequest, *GetHubsResponse) error
	GetHubsOfUser(context.Context, *GetHubRequest, *GetHubsResponse) error
	GetHubById(context.Context, *GetHubRequest, *GetHubResponse) error
	//Category Methods
	CreateCategory(context.Context, *CreateCategoryRequest, *CreateCategoryResponse) error
	UpdateCategory(context.Context, *UpdateCategoryRequest, *UpdateCategoryResponse) error
	UpdateCategoryStatus(context.Context, *UpdateCategoryStatusRequest, *UpdateCategoryResponse) error
	GetHubCategories(context.Context, *GetCategoryRequest, *GetCategoriesResponse) error
	UpdateCategoryImage(context.Context, *UpdateCategoryImageRequest, *UpdateCategoryResponse) error
	GetCategoryById(context.Context, *GetCategoryRequest, *GetCategoryResponse) error
	//Sub Category Methods
	CreateSubCategory(context.Context, *CreateSubCategoryRequest, *CreateSubCategoryResponse) error
	UpdateSubCategory(context.Context, *UpdateSubCategoryRequest, *UpdateSubCategoryResponse) error
	UpdateSubCategoryStatus(context.Context, *UpdateSubCategoryStatusRequest, *UpdateSubCategoryResponse) error
	UpdateSubCategoryImage(context.Context, *UpdateSubCategoryImageRequest, *UpdateSubCategoryResponse) error
	GetSubCategoriesOfCategory(context.Context, *GetSubCategoryRequest, *GetSubCategoriesResponse) error
	GetSubCategoryById(context.Context, *GetSubCategoryRequest, *GetSubCategoryResponse) error
	//Product Methods
	CreateProduct(context.Context, *CreateProductRequest, *CreateProductResponse) error
	UpdateProduct(context.Context, *UpdateProductRequest, *UpdateProductResponse) error
	UpdateProductStatus(context.Context, *UpdateProductStatusRequest, *UpdateProductResponse) error
	UpdateProductQty(context.Context, *UpdateProductQtyRequest, *UpdateProductResponse) error
	UpdateProductImage(context.Context, *UpdateProductImageRequest, *UpdateProductResponse) error
	GetProductsOfCategory(context.Context, *GetProductRequest, *GetProductsResponse) error
	NormalSearchProducts(context.Context, *ProductSearchRequest, *NormalProductSearchResponse) error
	GetProductsOfSubCategory(context.Context, *GetProductRequest, *GetProductsResponse) error
	GetProductById(context.Context, *GetProductRequest, *GetProductResponse) error
	//Combined Methods
	SearchProducts(context.Context, *ProductSearchRequest, *ProductSearchResponse) error
	HubInitData(context.Context, *HubInitRequest, *HubInitResponse) error
}

func RegisterHubServiceHandler(s server.Server, hdlr HubServiceHandler, opts ...server.HandlerOption) error {
	type hubService interface {
		CreateHub(ctx context.Context, in *CreateHubRequest, out *CreateHubResponse) error
		UpdateHub(ctx context.Context, in *UpdateHubRequest, out *UpdateHubResponse) error
		UpdateHubLocation(ctx context.Context, in *UpdateHubLocationRequest, out *UpdateHubResponse) error
		UpdateHubStatus(ctx context.Context, in *UpdateHubStatusRequest, out *UpdateHubResponse) error
		GetHubsOfCity(ctx context.Context, in *GetHubRequest, out *GetHubsResponse) error
		GetHubsOfUser(ctx context.Context, in *GetHubRequest, out *GetHubsResponse) error
		GetHubById(ctx context.Context, in *GetHubRequest, out *GetHubResponse) error
		CreateCategory(ctx context.Context, in *CreateCategoryRequest, out *CreateCategoryResponse) error
		UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, out *UpdateCategoryResponse) error
		UpdateCategoryStatus(ctx context.Context, in *UpdateCategoryStatusRequest, out *UpdateCategoryResponse) error
		GetHubCategories(ctx context.Context, in *GetCategoryRequest, out *GetCategoriesResponse) error
		UpdateCategoryImage(ctx context.Context, in *UpdateCategoryImageRequest, out *UpdateCategoryResponse) error
		GetCategoryById(ctx context.Context, in *GetCategoryRequest, out *GetCategoryResponse) error
		CreateSubCategory(ctx context.Context, in *CreateSubCategoryRequest, out *CreateSubCategoryResponse) error
		UpdateSubCategory(ctx context.Context, in *UpdateSubCategoryRequest, out *UpdateSubCategoryResponse) error
		UpdateSubCategoryStatus(ctx context.Context, in *UpdateSubCategoryStatusRequest, out *UpdateSubCategoryResponse) error
		UpdateSubCategoryImage(ctx context.Context, in *UpdateSubCategoryImageRequest, out *UpdateSubCategoryResponse) error
		GetSubCategoriesOfCategory(ctx context.Context, in *GetSubCategoryRequest, out *GetSubCategoriesResponse) error
		GetSubCategoryById(ctx context.Context, in *GetSubCategoryRequest, out *GetSubCategoryResponse) error
		CreateProduct(ctx context.Context, in *CreateProductRequest, out *CreateProductResponse) error
		UpdateProduct(ctx context.Context, in *UpdateProductRequest, out *UpdateProductResponse) error
		UpdateProductStatus(ctx context.Context, in *UpdateProductStatusRequest, out *UpdateProductResponse) error
		UpdateProductQty(ctx context.Context, in *UpdateProductQtyRequest, out *UpdateProductResponse) error
		UpdateProductImage(ctx context.Context, in *UpdateProductImageRequest, out *UpdateProductResponse) error
		GetProductsOfCategory(ctx context.Context, in *GetProductRequest, out *GetProductsResponse) error
		NormalSearchProducts(ctx context.Context, in *ProductSearchRequest, out *NormalProductSearchResponse) error
		GetProductsOfSubCategory(ctx context.Context, in *GetProductRequest, out *GetProductsResponse) error
		GetProductById(ctx context.Context, in *GetProductRequest, out *GetProductResponse) error
		SearchProducts(ctx context.Context, in *ProductSearchRequest, out *ProductSearchResponse) error
		HubInitData(ctx context.Context, in *HubInitRequest, out *HubInitResponse) error
	}
	type HubService struct {
		hubService
	}
	h := &hubServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&HubService{h}, opts...))
}

type hubServiceHandler struct {
	HubServiceHandler
}

func (h *hubServiceHandler) CreateHub(ctx context.Context, in *CreateHubRequest, out *CreateHubResponse) error {
	return h.HubServiceHandler.CreateHub(ctx, in, out)
}

func (h *hubServiceHandler) UpdateHub(ctx context.Context, in *UpdateHubRequest, out *UpdateHubResponse) error {
	return h.HubServiceHandler.UpdateHub(ctx, in, out)
}

func (h *hubServiceHandler) UpdateHubLocation(ctx context.Context, in *UpdateHubLocationRequest, out *UpdateHubResponse) error {
	return h.HubServiceHandler.UpdateHubLocation(ctx, in, out)
}

func (h *hubServiceHandler) UpdateHubStatus(ctx context.Context, in *UpdateHubStatusRequest, out *UpdateHubResponse) error {
	return h.HubServiceHandler.UpdateHubStatus(ctx, in, out)
}

func (h *hubServiceHandler) GetHubsOfCity(ctx context.Context, in *GetHubRequest, out *GetHubsResponse) error {
	return h.HubServiceHandler.GetHubsOfCity(ctx, in, out)
}

func (h *hubServiceHandler) GetHubsOfUser(ctx context.Context, in *GetHubRequest, out *GetHubsResponse) error {
	return h.HubServiceHandler.GetHubsOfUser(ctx, in, out)
}

func (h *hubServiceHandler) GetHubById(ctx context.Context, in *GetHubRequest, out *GetHubResponse) error {
	return h.HubServiceHandler.GetHubById(ctx, in, out)
}

func (h *hubServiceHandler) CreateCategory(ctx context.Context, in *CreateCategoryRequest, out *CreateCategoryResponse) error {
	return h.HubServiceHandler.CreateCategory(ctx, in, out)
}

func (h *hubServiceHandler) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, out *UpdateCategoryResponse) error {
	return h.HubServiceHandler.UpdateCategory(ctx, in, out)
}

func (h *hubServiceHandler) UpdateCategoryStatus(ctx context.Context, in *UpdateCategoryStatusRequest, out *UpdateCategoryResponse) error {
	return h.HubServiceHandler.UpdateCategoryStatus(ctx, in, out)
}

func (h *hubServiceHandler) GetHubCategories(ctx context.Context, in *GetCategoryRequest, out *GetCategoriesResponse) error {
	return h.HubServiceHandler.GetHubCategories(ctx, in, out)
}

func (h *hubServiceHandler) UpdateCategoryImage(ctx context.Context, in *UpdateCategoryImageRequest, out *UpdateCategoryResponse) error {
	return h.HubServiceHandler.UpdateCategoryImage(ctx, in, out)
}

func (h *hubServiceHandler) GetCategoryById(ctx context.Context, in *GetCategoryRequest, out *GetCategoryResponse) error {
	return h.HubServiceHandler.GetCategoryById(ctx, in, out)
}

func (h *hubServiceHandler) CreateSubCategory(ctx context.Context, in *CreateSubCategoryRequest, out *CreateSubCategoryResponse) error {
	return h.HubServiceHandler.CreateSubCategory(ctx, in, out)
}

func (h *hubServiceHandler) UpdateSubCategory(ctx context.Context, in *UpdateSubCategoryRequest, out *UpdateSubCategoryResponse) error {
	return h.HubServiceHandler.UpdateSubCategory(ctx, in, out)
}

func (h *hubServiceHandler) UpdateSubCategoryStatus(ctx context.Context, in *UpdateSubCategoryStatusRequest, out *UpdateSubCategoryResponse) error {
	return h.HubServiceHandler.UpdateSubCategoryStatus(ctx, in, out)
}

func (h *hubServiceHandler) UpdateSubCategoryImage(ctx context.Context, in *UpdateSubCategoryImageRequest, out *UpdateSubCategoryResponse) error {
	return h.HubServiceHandler.UpdateSubCategoryImage(ctx, in, out)
}

func (h *hubServiceHandler) GetSubCategoriesOfCategory(ctx context.Context, in *GetSubCategoryRequest, out *GetSubCategoriesResponse) error {
	return h.HubServiceHandler.GetSubCategoriesOfCategory(ctx, in, out)
}

func (h *hubServiceHandler) GetSubCategoryById(ctx context.Context, in *GetSubCategoryRequest, out *GetSubCategoryResponse) error {
	return h.HubServiceHandler.GetSubCategoryById(ctx, in, out)
}

func (h *hubServiceHandler) CreateProduct(ctx context.Context, in *CreateProductRequest, out *CreateProductResponse) error {
	return h.HubServiceHandler.CreateProduct(ctx, in, out)
}

func (h *hubServiceHandler) UpdateProduct(ctx context.Context, in *UpdateProductRequest, out *UpdateProductResponse) error {
	return h.HubServiceHandler.UpdateProduct(ctx, in, out)
}

func (h *hubServiceHandler) UpdateProductStatus(ctx context.Context, in *UpdateProductStatusRequest, out *UpdateProductResponse) error {
	return h.HubServiceHandler.UpdateProductStatus(ctx, in, out)
}

func (h *hubServiceHandler) UpdateProductQty(ctx context.Context, in *UpdateProductQtyRequest, out *UpdateProductResponse) error {
	return h.HubServiceHandler.UpdateProductQty(ctx, in, out)
}

func (h *hubServiceHandler) UpdateProductImage(ctx context.Context, in *UpdateProductImageRequest, out *UpdateProductResponse) error {
	return h.HubServiceHandler.UpdateProductImage(ctx, in, out)
}

func (h *hubServiceHandler) GetProductsOfCategory(ctx context.Context, in *GetProductRequest, out *GetProductsResponse) error {
	return h.HubServiceHandler.GetProductsOfCategory(ctx, in, out)
}

func (h *hubServiceHandler) NormalSearchProducts(ctx context.Context, in *ProductSearchRequest, out *NormalProductSearchResponse) error {
	return h.HubServiceHandler.NormalSearchProducts(ctx, in, out)
}

func (h *hubServiceHandler) GetProductsOfSubCategory(ctx context.Context, in *GetProductRequest, out *GetProductsResponse) error {
	return h.HubServiceHandler.GetProductsOfSubCategory(ctx, in, out)
}

func (h *hubServiceHandler) GetProductById(ctx context.Context, in *GetProductRequest, out *GetProductResponse) error {
	return h.HubServiceHandler.GetProductById(ctx, in, out)
}

func (h *hubServiceHandler) SearchProducts(ctx context.Context, in *ProductSearchRequest, out *ProductSearchResponse) error {
	return h.HubServiceHandler.SearchProducts(ctx, in, out)
}

func (h *hubServiceHandler) HubInitData(ctx context.Context, in *HubInitRequest, out *HubInitResponse) error {
	return h.HubServiceHandler.HubInitData(ctx, in, out)
}
