// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: logistics.proto

package justify

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LogisticsService service

func NewLogisticsServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LogisticsService service

type LogisticsService interface {
	//Logistics Subscription Methods
	CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...client.CallOption) (*CreateSubscriptionResponse, error)
	UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...client.CallOption) (*UpdateSubscriptionResponse, error)
	UpdateSubscriptionStatus(ctx context.Context, in *UpdateSubscriptionRequest, opts ...client.CallOption) (*UpdateSubscriptionResponse, error)
	DetermineWalletBalance(ctx context.Context, in *DetermineWalletBalanceRequest, opts ...client.CallOption) (*DetermineWalletBalanceResponse, error)
	GetSubscriptionById(ctx context.Context, in *GetSubscriptionRequest, opts ...client.CallOption) (*GetSubscriptionResponse, error)
	//Complex Logitics Call
	GetInfoSubscriptions(ctx context.Context, in *FilterSubscriptionRequest, opts ...client.CallOption) (*GetInfoSubscriptionsResponse, error)
	GetSubscriptionSummary(ctx context.Context, in *FilterSubscriptionRequest, opts ...client.CallOption) (*GetSubscriptionSummaryResponse, error)
	GetInventoryData(ctx context.Context, in *FilterSubscriptionRequest, opts ...client.CallOption) (*GetInvetoryDataResponse, error)
	GetInventoryCustomers(ctx context.Context, in *FilterSubscriptionRequest, opts ...client.CallOption) (*GetInvetoryCustomersResponse, error)
	//Slot Methods
	CreateSlot(ctx context.Context, in *CreateSlotRequest, opts ...client.CallOption) (*CreateSlotResponse, error)
	UpdateSlot(ctx context.Context, in *UpdateSlotRequest, opts ...client.CallOption) (*UpdateSlotResponse, error)
	GetCitySlots(ctx context.Context, in *GetSlotRequest, opts ...client.CallOption) (*GetSlotsResponse, error)
	GetSlotById(ctx context.Context, in *GetSlotRequest, opts ...client.CallOption) (*GetSlotResponse, error)
	DeleteSlotById(ctx context.Context, in *GetSlotRequest, opts ...client.CallOption) (*UpdateSlotResponse, error)
	//Agent Methods
	CreateAgent(ctx context.Context, in *CreateAgentRequest, opts ...client.CallOption) (*CreateAgentResponse, error)
	UpdateAgent(ctx context.Context, in *UpdateAgentRequest, opts ...client.CallOption) (*UpdateAgentResponse, error)
	UpdateAgentStatus(ctx context.Context, in *UpdateAgentRequest, opts ...client.CallOption) (*UpdateAgentResponse, error)
	UpdateAgentLocation(ctx context.Context, in *UpdateAgentRequest, opts ...client.CallOption) (*UpdateAgentResponse, error)
	UpdateAgentAvatar(ctx context.Context, in *UpdateAgentRequest, opts ...client.CallOption) (*UpdateAgentResponse, error)
	GetAgentsOfCity(ctx context.Context, in *GetAgentRequest, opts ...client.CallOption) (*GetAgentsResponse, error)
	FilterAgent(ctx context.Context, in *FilterAgentRequest, opts ...client.CallOption) (*GetAgentsResponse, error)
	GetAgentById(ctx context.Context, in *GetAgentRequest, opts ...client.CallOption) (*GetAgentResponse, error)
	//Agent App Functions
	VerifyAgent(ctx context.Context, in *GetAgentRequest, opts ...client.CallOption) (*GetAgentResponse, error)
	InitAgentHome(ctx context.Context, in *GetAgentRequest, opts ...client.CallOption) (*AgentHomeData, error)
	AgentProfileData(ctx context.Context, in *GetAgentRequest, opts ...client.CallOption) (*AgentProfileResponse, error)
	//Route Methods
	CreateRoute(ctx context.Context, in *CreateRouteRequest, opts ...client.CallOption) (*CreateRouteResponse, error)
	UpdateRoute(ctx context.Context, in *UpdateRouteRequest, opts ...client.CallOption) (*UpdateRouteResponse, error)
	GetRoutesOfHub(ctx context.Context, in *GetRouteRequest, opts ...client.CallOption) (*GetRoutesResponse, error)
	GetRoutesOfCity(ctx context.Context, in *GetRouteRequest, opts ...client.CallOption) (*GetRoutesResponse, error)
	GetRouteById(ctx context.Context, in *GetRouteRequest, opts ...client.CallOption) (*GetRouteResponse, error)
	AssignRouteAgent(ctx context.Context, in *AssignRouteAgentRequest, opts ...client.CallOption) (*UpdateRouteResponse, error)
	AssignRouteVehicle(ctx context.Context, in *AssignRouteVehicleRequest, opts ...client.CallOption) (*UpdateRouteResponse, error)
	//Route Node Methods
	SaveRouteNode(ctx context.Context, in *SaveRouteNodeRequest, opts ...client.CallOption) (*UpdateRouteResponse, error)
	GetRouteNodeOfRoute(ctx context.Context, in *GetRouteNodeRequest, opts ...client.CallOption) (*GetRouteNodeResponse, error)
	//Task-Route Pipeline and Task Methods
	MakeTaskFromRoute(ctx context.Context, in *MakeTaskFromRouteRequest, opts ...client.CallOption) (*MakeTaskFromRouteResponse, error)
	UpdateRouteTask(ctx context.Context, in *UpdateRouteTaskRequest, opts ...client.CallOption) (*UpdateRouteResponse, error)
	GetRouteTask(ctx context.Context, in *GetRouteTaskRequest, opts ...client.CallOption) (*GetRouteTasksResponse, error)
	GetRouteTaskById(ctx context.Context, in *GetRouteTaskRequest, opts ...client.CallOption) (*GetRouteTaskResponse, error)
	//Task Point
	GetTaskPoints(ctx context.Context, in *GetTaskPointRequest, opts ...client.CallOption) (*GetTaskPointsResponse, error)
	GetTaskPointById(ctx context.Context, in *GetTaskPointRequest, opts ...client.CallOption) (*GetTaskPointResponse, error)
	//Main Logistics Methods
	CreateTaskFromPoints(ctx context.Context, in *CreateTaskRequest, opts ...client.CallOption) (*CreateTaskResponse, error)
	AssignTaskAgent(ctx context.Context, in *AssignTaskAgentRequest, opts ...client.CallOption) (*UpdateRouteResponse, error)
	TransferTaskPoint(ctx context.Context, in *TansferTaskPointRequest, opts ...client.CallOption) (*UpdateRouteResponse, error)
	//Admin App Methods
	AppHomeData(ctx context.Context, in *GetRouteTaskRequest, opts ...client.CallOption) (*GetAppHomeResponse, error)
	//RealRoute Code: Start
	//Locations
	CreateLocation(ctx context.Context, in *CreateLocationRequest, opts ...client.CallOption) (*CreateLocationResponse, error)
	UpdateLocation(ctx context.Context, in *UpdateLocationRequest, opts ...client.CallOption) (*UpdateLocationResponse, error)
	CityLocations(ctx context.Context, in *GetLocationRequest, opts ...client.CallOption) (*GetLocationsResponse, error)
	GetLocationById(ctx context.Context, in *GetLocationRequest, opts ...client.CallOption) (*GetLocationResponse, error)
	//Vehicle Methods
	CreateVehicle(ctx context.Context, in *CreateVehicleRequest, opts ...client.CallOption) (*CreateVehicleResponse, error)
	UpdateVehicle(ctx context.Context, in *UpdateVehicleRequest, opts ...client.CallOption) (*UpdateVehicleResponse, error)
	UpdateVehicleImage(ctx context.Context, in *UpdateVehicleRequest, opts ...client.CallOption) (*UpdateVehicleResponse, error)
	UpdateVehicleLocation(ctx context.Context, in *UpdateVehicleRequest, opts ...client.CallOption) (*UpdateVehicleResponse, error)
	GetVehicle(ctx context.Context, in *GetVehicleRequest, opts ...client.CallOption) (*GetVehicleResponse, error)
	GetVehiclesOfCity(ctx context.Context, in *GetVehicleRequest, opts ...client.CallOption) (*GetVehiclesResponse, error)
	//Tracking Web Methods
	GetTrackingData(ctx context.Context, in *GetTrackingDataRequest, opts ...client.CallOption) (*GetTrackingDataResponse, error)
}

type logisticsService struct {
	c    client.Client
	name string
}

func NewLogisticsService(name string, c client.Client) LogisticsService {
	return &logisticsService{
		c:    c,
		name: name,
	}
}

func (c *logisticsService) CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...client.CallOption) (*CreateSubscriptionResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.CreateSubscription", in)
	out := new(CreateSubscriptionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...client.CallOption) (*UpdateSubscriptionResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.UpdateSubscription", in)
	out := new(UpdateSubscriptionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) UpdateSubscriptionStatus(ctx context.Context, in *UpdateSubscriptionRequest, opts ...client.CallOption) (*UpdateSubscriptionResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.UpdateSubscriptionStatus", in)
	out := new(UpdateSubscriptionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) DetermineWalletBalance(ctx context.Context, in *DetermineWalletBalanceRequest, opts ...client.CallOption) (*DetermineWalletBalanceResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.DetermineWalletBalance", in)
	out := new(DetermineWalletBalanceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) GetSubscriptionById(ctx context.Context, in *GetSubscriptionRequest, opts ...client.CallOption) (*GetSubscriptionResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.GetSubscriptionById", in)
	out := new(GetSubscriptionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) GetInfoSubscriptions(ctx context.Context, in *FilterSubscriptionRequest, opts ...client.CallOption) (*GetInfoSubscriptionsResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.GetInfoSubscriptions", in)
	out := new(GetInfoSubscriptionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) GetSubscriptionSummary(ctx context.Context, in *FilterSubscriptionRequest, opts ...client.CallOption) (*GetSubscriptionSummaryResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.GetSubscriptionSummary", in)
	out := new(GetSubscriptionSummaryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) GetInventoryData(ctx context.Context, in *FilterSubscriptionRequest, opts ...client.CallOption) (*GetInvetoryDataResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.GetInventoryData", in)
	out := new(GetInvetoryDataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) GetInventoryCustomers(ctx context.Context, in *FilterSubscriptionRequest, opts ...client.CallOption) (*GetInvetoryCustomersResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.GetInventoryCustomers", in)
	out := new(GetInvetoryCustomersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) CreateSlot(ctx context.Context, in *CreateSlotRequest, opts ...client.CallOption) (*CreateSlotResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.CreateSlot", in)
	out := new(CreateSlotResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) UpdateSlot(ctx context.Context, in *UpdateSlotRequest, opts ...client.CallOption) (*UpdateSlotResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.UpdateSlot", in)
	out := new(UpdateSlotResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) GetCitySlots(ctx context.Context, in *GetSlotRequest, opts ...client.CallOption) (*GetSlotsResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.GetCitySlots", in)
	out := new(GetSlotsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) GetSlotById(ctx context.Context, in *GetSlotRequest, opts ...client.CallOption) (*GetSlotResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.GetSlotById", in)
	out := new(GetSlotResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) DeleteSlotById(ctx context.Context, in *GetSlotRequest, opts ...client.CallOption) (*UpdateSlotResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.DeleteSlotById", in)
	out := new(UpdateSlotResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) CreateAgent(ctx context.Context, in *CreateAgentRequest, opts ...client.CallOption) (*CreateAgentResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.CreateAgent", in)
	out := new(CreateAgentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) UpdateAgent(ctx context.Context, in *UpdateAgentRequest, opts ...client.CallOption) (*UpdateAgentResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.UpdateAgent", in)
	out := new(UpdateAgentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) UpdateAgentStatus(ctx context.Context, in *UpdateAgentRequest, opts ...client.CallOption) (*UpdateAgentResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.UpdateAgentStatus", in)
	out := new(UpdateAgentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) UpdateAgentLocation(ctx context.Context, in *UpdateAgentRequest, opts ...client.CallOption) (*UpdateAgentResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.UpdateAgentLocation", in)
	out := new(UpdateAgentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) UpdateAgentAvatar(ctx context.Context, in *UpdateAgentRequest, opts ...client.CallOption) (*UpdateAgentResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.UpdateAgentAvatar", in)
	out := new(UpdateAgentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) GetAgentsOfCity(ctx context.Context, in *GetAgentRequest, opts ...client.CallOption) (*GetAgentsResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.GetAgentsOfCity", in)
	out := new(GetAgentsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) FilterAgent(ctx context.Context, in *FilterAgentRequest, opts ...client.CallOption) (*GetAgentsResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.FilterAgent", in)
	out := new(GetAgentsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) GetAgentById(ctx context.Context, in *GetAgentRequest, opts ...client.CallOption) (*GetAgentResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.GetAgentById", in)
	out := new(GetAgentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) VerifyAgent(ctx context.Context, in *GetAgentRequest, opts ...client.CallOption) (*GetAgentResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.VerifyAgent", in)
	out := new(GetAgentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) InitAgentHome(ctx context.Context, in *GetAgentRequest, opts ...client.CallOption) (*AgentHomeData, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.InitAgentHome", in)
	out := new(AgentHomeData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) AgentProfileData(ctx context.Context, in *GetAgentRequest, opts ...client.CallOption) (*AgentProfileResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.AgentProfileData", in)
	out := new(AgentProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) CreateRoute(ctx context.Context, in *CreateRouteRequest, opts ...client.CallOption) (*CreateRouteResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.CreateRoute", in)
	out := new(CreateRouteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) UpdateRoute(ctx context.Context, in *UpdateRouteRequest, opts ...client.CallOption) (*UpdateRouteResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.UpdateRoute", in)
	out := new(UpdateRouteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) GetRoutesOfHub(ctx context.Context, in *GetRouteRequest, opts ...client.CallOption) (*GetRoutesResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.GetRoutesOfHub", in)
	out := new(GetRoutesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) GetRoutesOfCity(ctx context.Context, in *GetRouteRequest, opts ...client.CallOption) (*GetRoutesResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.GetRoutesOfCity", in)
	out := new(GetRoutesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) GetRouteById(ctx context.Context, in *GetRouteRequest, opts ...client.CallOption) (*GetRouteResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.GetRouteById", in)
	out := new(GetRouteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) AssignRouteAgent(ctx context.Context, in *AssignRouteAgentRequest, opts ...client.CallOption) (*UpdateRouteResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.AssignRouteAgent", in)
	out := new(UpdateRouteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) AssignRouteVehicle(ctx context.Context, in *AssignRouteVehicleRequest, opts ...client.CallOption) (*UpdateRouteResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.AssignRouteVehicle", in)
	out := new(UpdateRouteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) SaveRouteNode(ctx context.Context, in *SaveRouteNodeRequest, opts ...client.CallOption) (*UpdateRouteResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.SaveRouteNode", in)
	out := new(UpdateRouteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) GetRouteNodeOfRoute(ctx context.Context, in *GetRouteNodeRequest, opts ...client.CallOption) (*GetRouteNodeResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.GetRouteNodeOfRoute", in)
	out := new(GetRouteNodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) MakeTaskFromRoute(ctx context.Context, in *MakeTaskFromRouteRequest, opts ...client.CallOption) (*MakeTaskFromRouteResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.MakeTaskFromRoute", in)
	out := new(MakeTaskFromRouteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) UpdateRouteTask(ctx context.Context, in *UpdateRouteTaskRequest, opts ...client.CallOption) (*UpdateRouteResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.UpdateRouteTask", in)
	out := new(UpdateRouteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) GetRouteTask(ctx context.Context, in *GetRouteTaskRequest, opts ...client.CallOption) (*GetRouteTasksResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.GetRouteTask", in)
	out := new(GetRouteTasksResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) GetRouteTaskById(ctx context.Context, in *GetRouteTaskRequest, opts ...client.CallOption) (*GetRouteTaskResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.GetRouteTaskById", in)
	out := new(GetRouteTaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) GetTaskPoints(ctx context.Context, in *GetTaskPointRequest, opts ...client.CallOption) (*GetTaskPointsResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.GetTaskPoints", in)
	out := new(GetTaskPointsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) GetTaskPointById(ctx context.Context, in *GetTaskPointRequest, opts ...client.CallOption) (*GetTaskPointResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.GetTaskPointById", in)
	out := new(GetTaskPointResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) CreateTaskFromPoints(ctx context.Context, in *CreateTaskRequest, opts ...client.CallOption) (*CreateTaskResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.CreateTaskFromPoints", in)
	out := new(CreateTaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) AssignTaskAgent(ctx context.Context, in *AssignTaskAgentRequest, opts ...client.CallOption) (*UpdateRouteResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.AssignTaskAgent", in)
	out := new(UpdateRouteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) TransferTaskPoint(ctx context.Context, in *TansferTaskPointRequest, opts ...client.CallOption) (*UpdateRouteResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.TransferTaskPoint", in)
	out := new(UpdateRouteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) AppHomeData(ctx context.Context, in *GetRouteTaskRequest, opts ...client.CallOption) (*GetAppHomeResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.AppHomeData", in)
	out := new(GetAppHomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) CreateLocation(ctx context.Context, in *CreateLocationRequest, opts ...client.CallOption) (*CreateLocationResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.CreateLocation", in)
	out := new(CreateLocationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) UpdateLocation(ctx context.Context, in *UpdateLocationRequest, opts ...client.CallOption) (*UpdateLocationResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.UpdateLocation", in)
	out := new(UpdateLocationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) CityLocations(ctx context.Context, in *GetLocationRequest, opts ...client.CallOption) (*GetLocationsResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.CityLocations", in)
	out := new(GetLocationsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) GetLocationById(ctx context.Context, in *GetLocationRequest, opts ...client.CallOption) (*GetLocationResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.GetLocationById", in)
	out := new(GetLocationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) CreateVehicle(ctx context.Context, in *CreateVehicleRequest, opts ...client.CallOption) (*CreateVehicleResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.CreateVehicle", in)
	out := new(CreateVehicleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) UpdateVehicle(ctx context.Context, in *UpdateVehicleRequest, opts ...client.CallOption) (*UpdateVehicleResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.UpdateVehicle", in)
	out := new(UpdateVehicleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) UpdateVehicleImage(ctx context.Context, in *UpdateVehicleRequest, opts ...client.CallOption) (*UpdateVehicleResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.UpdateVehicleImage", in)
	out := new(UpdateVehicleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) UpdateVehicleLocation(ctx context.Context, in *UpdateVehicleRequest, opts ...client.CallOption) (*UpdateVehicleResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.UpdateVehicleLocation", in)
	out := new(UpdateVehicleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) GetVehicle(ctx context.Context, in *GetVehicleRequest, opts ...client.CallOption) (*GetVehicleResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.GetVehicle", in)
	out := new(GetVehicleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) GetVehiclesOfCity(ctx context.Context, in *GetVehicleRequest, opts ...client.CallOption) (*GetVehiclesResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.GetVehiclesOfCity", in)
	out := new(GetVehiclesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsService) GetTrackingData(ctx context.Context, in *GetTrackingDataRequest, opts ...client.CallOption) (*GetTrackingDataResponse, error) {
	req := c.c.NewRequest(c.name, "LogisticsService.GetTrackingData", in)
	out := new(GetTrackingDataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LogisticsService service

type LogisticsServiceHandler interface {
	//Logistics Subscription Methods
	CreateSubscription(context.Context, *CreateSubscriptionRequest, *CreateSubscriptionResponse) error
	UpdateSubscription(context.Context, *UpdateSubscriptionRequest, *UpdateSubscriptionResponse) error
	UpdateSubscriptionStatus(context.Context, *UpdateSubscriptionRequest, *UpdateSubscriptionResponse) error
	DetermineWalletBalance(context.Context, *DetermineWalletBalanceRequest, *DetermineWalletBalanceResponse) error
	GetSubscriptionById(context.Context, *GetSubscriptionRequest, *GetSubscriptionResponse) error
	//Complex Logitics Call
	GetInfoSubscriptions(context.Context, *FilterSubscriptionRequest, *GetInfoSubscriptionsResponse) error
	GetSubscriptionSummary(context.Context, *FilterSubscriptionRequest, *GetSubscriptionSummaryResponse) error
	GetInventoryData(context.Context, *FilterSubscriptionRequest, *GetInvetoryDataResponse) error
	GetInventoryCustomers(context.Context, *FilterSubscriptionRequest, *GetInvetoryCustomersResponse) error
	//Slot Methods
	CreateSlot(context.Context, *CreateSlotRequest, *CreateSlotResponse) error
	UpdateSlot(context.Context, *UpdateSlotRequest, *UpdateSlotResponse) error
	GetCitySlots(context.Context, *GetSlotRequest, *GetSlotsResponse) error
	GetSlotById(context.Context, *GetSlotRequest, *GetSlotResponse) error
	DeleteSlotById(context.Context, *GetSlotRequest, *UpdateSlotResponse) error
	//Agent Methods
	CreateAgent(context.Context, *CreateAgentRequest, *CreateAgentResponse) error
	UpdateAgent(context.Context, *UpdateAgentRequest, *UpdateAgentResponse) error
	UpdateAgentStatus(context.Context, *UpdateAgentRequest, *UpdateAgentResponse) error
	UpdateAgentLocation(context.Context, *UpdateAgentRequest, *UpdateAgentResponse) error
	UpdateAgentAvatar(context.Context, *UpdateAgentRequest, *UpdateAgentResponse) error
	GetAgentsOfCity(context.Context, *GetAgentRequest, *GetAgentsResponse) error
	FilterAgent(context.Context, *FilterAgentRequest, *GetAgentsResponse) error
	GetAgentById(context.Context, *GetAgentRequest, *GetAgentResponse) error
	//Agent App Functions
	VerifyAgent(context.Context, *GetAgentRequest, *GetAgentResponse) error
	InitAgentHome(context.Context, *GetAgentRequest, *AgentHomeData) error
	AgentProfileData(context.Context, *GetAgentRequest, *AgentProfileResponse) error
	//Route Methods
	CreateRoute(context.Context, *CreateRouteRequest, *CreateRouteResponse) error
	UpdateRoute(context.Context, *UpdateRouteRequest, *UpdateRouteResponse) error
	GetRoutesOfHub(context.Context, *GetRouteRequest, *GetRoutesResponse) error
	GetRoutesOfCity(context.Context, *GetRouteRequest, *GetRoutesResponse) error
	GetRouteById(context.Context, *GetRouteRequest, *GetRouteResponse) error
	AssignRouteAgent(context.Context, *AssignRouteAgentRequest, *UpdateRouteResponse) error
	AssignRouteVehicle(context.Context, *AssignRouteVehicleRequest, *UpdateRouteResponse) error
	//Route Node Methods
	SaveRouteNode(context.Context, *SaveRouteNodeRequest, *UpdateRouteResponse) error
	GetRouteNodeOfRoute(context.Context, *GetRouteNodeRequest, *GetRouteNodeResponse) error
	//Task-Route Pipeline and Task Methods
	MakeTaskFromRoute(context.Context, *MakeTaskFromRouteRequest, *MakeTaskFromRouteResponse) error
	UpdateRouteTask(context.Context, *UpdateRouteTaskRequest, *UpdateRouteResponse) error
	GetRouteTask(context.Context, *GetRouteTaskRequest, *GetRouteTasksResponse) error
	GetRouteTaskById(context.Context, *GetRouteTaskRequest, *GetRouteTaskResponse) error
	//Task Point
	GetTaskPoints(context.Context, *GetTaskPointRequest, *GetTaskPointsResponse) error
	GetTaskPointById(context.Context, *GetTaskPointRequest, *GetTaskPointResponse) error
	//Main Logistics Methods
	CreateTaskFromPoints(context.Context, *CreateTaskRequest, *CreateTaskResponse) error
	AssignTaskAgent(context.Context, *AssignTaskAgentRequest, *UpdateRouteResponse) error
	TransferTaskPoint(context.Context, *TansferTaskPointRequest, *UpdateRouteResponse) error
	//Admin App Methods
	AppHomeData(context.Context, *GetRouteTaskRequest, *GetAppHomeResponse) error
	//RealRoute Code: Start
	//Locations
	CreateLocation(context.Context, *CreateLocationRequest, *CreateLocationResponse) error
	UpdateLocation(context.Context, *UpdateLocationRequest, *UpdateLocationResponse) error
	CityLocations(context.Context, *GetLocationRequest, *GetLocationsResponse) error
	GetLocationById(context.Context, *GetLocationRequest, *GetLocationResponse) error
	//Vehicle Methods
	CreateVehicle(context.Context, *CreateVehicleRequest, *CreateVehicleResponse) error
	UpdateVehicle(context.Context, *UpdateVehicleRequest, *UpdateVehicleResponse) error
	UpdateVehicleImage(context.Context, *UpdateVehicleRequest, *UpdateVehicleResponse) error
	UpdateVehicleLocation(context.Context, *UpdateVehicleRequest, *UpdateVehicleResponse) error
	GetVehicle(context.Context, *GetVehicleRequest, *GetVehicleResponse) error
	GetVehiclesOfCity(context.Context, *GetVehicleRequest, *GetVehiclesResponse) error
	//Tracking Web Methods
	GetTrackingData(context.Context, *GetTrackingDataRequest, *GetTrackingDataResponse) error
}

func RegisterLogisticsServiceHandler(s server.Server, hdlr LogisticsServiceHandler, opts ...server.HandlerOption) error {
	type logisticsService interface {
		CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, out *CreateSubscriptionResponse) error
		UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, out *UpdateSubscriptionResponse) error
		UpdateSubscriptionStatus(ctx context.Context, in *UpdateSubscriptionRequest, out *UpdateSubscriptionResponse) error
		DetermineWalletBalance(ctx context.Context, in *DetermineWalletBalanceRequest, out *DetermineWalletBalanceResponse) error
		GetSubscriptionById(ctx context.Context, in *GetSubscriptionRequest, out *GetSubscriptionResponse) error
		GetInfoSubscriptions(ctx context.Context, in *FilterSubscriptionRequest, out *GetInfoSubscriptionsResponse) error
		GetSubscriptionSummary(ctx context.Context, in *FilterSubscriptionRequest, out *GetSubscriptionSummaryResponse) error
		GetInventoryData(ctx context.Context, in *FilterSubscriptionRequest, out *GetInvetoryDataResponse) error
		GetInventoryCustomers(ctx context.Context, in *FilterSubscriptionRequest, out *GetInvetoryCustomersResponse) error
		CreateSlot(ctx context.Context, in *CreateSlotRequest, out *CreateSlotResponse) error
		UpdateSlot(ctx context.Context, in *UpdateSlotRequest, out *UpdateSlotResponse) error
		GetCitySlots(ctx context.Context, in *GetSlotRequest, out *GetSlotsResponse) error
		GetSlotById(ctx context.Context, in *GetSlotRequest, out *GetSlotResponse) error
		DeleteSlotById(ctx context.Context, in *GetSlotRequest, out *UpdateSlotResponse) error
		CreateAgent(ctx context.Context, in *CreateAgentRequest, out *CreateAgentResponse) error
		UpdateAgent(ctx context.Context, in *UpdateAgentRequest, out *UpdateAgentResponse) error
		UpdateAgentStatus(ctx context.Context, in *UpdateAgentRequest, out *UpdateAgentResponse) error
		UpdateAgentLocation(ctx context.Context, in *UpdateAgentRequest, out *UpdateAgentResponse) error
		UpdateAgentAvatar(ctx context.Context, in *UpdateAgentRequest, out *UpdateAgentResponse) error
		GetAgentsOfCity(ctx context.Context, in *GetAgentRequest, out *GetAgentsResponse) error
		FilterAgent(ctx context.Context, in *FilterAgentRequest, out *GetAgentsResponse) error
		GetAgentById(ctx context.Context, in *GetAgentRequest, out *GetAgentResponse) error
		VerifyAgent(ctx context.Context, in *GetAgentRequest, out *GetAgentResponse) error
		InitAgentHome(ctx context.Context, in *GetAgentRequest, out *AgentHomeData) error
		AgentProfileData(ctx context.Context, in *GetAgentRequest, out *AgentProfileResponse) error
		CreateRoute(ctx context.Context, in *CreateRouteRequest, out *CreateRouteResponse) error
		UpdateRoute(ctx context.Context, in *UpdateRouteRequest, out *UpdateRouteResponse) error
		GetRoutesOfHub(ctx context.Context, in *GetRouteRequest, out *GetRoutesResponse) error
		GetRoutesOfCity(ctx context.Context, in *GetRouteRequest, out *GetRoutesResponse) error
		GetRouteById(ctx context.Context, in *GetRouteRequest, out *GetRouteResponse) error
		AssignRouteAgent(ctx context.Context, in *AssignRouteAgentRequest, out *UpdateRouteResponse) error
		AssignRouteVehicle(ctx context.Context, in *AssignRouteVehicleRequest, out *UpdateRouteResponse) error
		SaveRouteNode(ctx context.Context, in *SaveRouteNodeRequest, out *UpdateRouteResponse) error
		GetRouteNodeOfRoute(ctx context.Context, in *GetRouteNodeRequest, out *GetRouteNodeResponse) error
		MakeTaskFromRoute(ctx context.Context, in *MakeTaskFromRouteRequest, out *MakeTaskFromRouteResponse) error
		UpdateRouteTask(ctx context.Context, in *UpdateRouteTaskRequest, out *UpdateRouteResponse) error
		GetRouteTask(ctx context.Context, in *GetRouteTaskRequest, out *GetRouteTasksResponse) error
		GetRouteTaskById(ctx context.Context, in *GetRouteTaskRequest, out *GetRouteTaskResponse) error
		GetTaskPoints(ctx context.Context, in *GetTaskPointRequest, out *GetTaskPointsResponse) error
		GetTaskPointById(ctx context.Context, in *GetTaskPointRequest, out *GetTaskPointResponse) error
		CreateTaskFromPoints(ctx context.Context, in *CreateTaskRequest, out *CreateTaskResponse) error
		AssignTaskAgent(ctx context.Context, in *AssignTaskAgentRequest, out *UpdateRouteResponse) error
		TransferTaskPoint(ctx context.Context, in *TansferTaskPointRequest, out *UpdateRouteResponse) error
		AppHomeData(ctx context.Context, in *GetRouteTaskRequest, out *GetAppHomeResponse) error
		CreateLocation(ctx context.Context, in *CreateLocationRequest, out *CreateLocationResponse) error
		UpdateLocation(ctx context.Context, in *UpdateLocationRequest, out *UpdateLocationResponse) error
		CityLocations(ctx context.Context, in *GetLocationRequest, out *GetLocationsResponse) error
		GetLocationById(ctx context.Context, in *GetLocationRequest, out *GetLocationResponse) error
		CreateVehicle(ctx context.Context, in *CreateVehicleRequest, out *CreateVehicleResponse) error
		UpdateVehicle(ctx context.Context, in *UpdateVehicleRequest, out *UpdateVehicleResponse) error
		UpdateVehicleImage(ctx context.Context, in *UpdateVehicleRequest, out *UpdateVehicleResponse) error
		UpdateVehicleLocation(ctx context.Context, in *UpdateVehicleRequest, out *UpdateVehicleResponse) error
		GetVehicle(ctx context.Context, in *GetVehicleRequest, out *GetVehicleResponse) error
		GetVehiclesOfCity(ctx context.Context, in *GetVehicleRequest, out *GetVehiclesResponse) error
		GetTrackingData(ctx context.Context, in *GetTrackingDataRequest, out *GetTrackingDataResponse) error
	}
	type LogisticsService struct {
		logisticsService
	}
	h := &logisticsServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LogisticsService{h}, opts...))
}

type logisticsServiceHandler struct {
	LogisticsServiceHandler
}

func (h *logisticsServiceHandler) CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, out *CreateSubscriptionResponse) error {
	return h.LogisticsServiceHandler.CreateSubscription(ctx, in, out)
}

func (h *logisticsServiceHandler) UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, out *UpdateSubscriptionResponse) error {
	return h.LogisticsServiceHandler.UpdateSubscription(ctx, in, out)
}

func (h *logisticsServiceHandler) UpdateSubscriptionStatus(ctx context.Context, in *UpdateSubscriptionRequest, out *UpdateSubscriptionResponse) error {
	return h.LogisticsServiceHandler.UpdateSubscriptionStatus(ctx, in, out)
}

func (h *logisticsServiceHandler) DetermineWalletBalance(ctx context.Context, in *DetermineWalletBalanceRequest, out *DetermineWalletBalanceResponse) error {
	return h.LogisticsServiceHandler.DetermineWalletBalance(ctx, in, out)
}

func (h *logisticsServiceHandler) GetSubscriptionById(ctx context.Context, in *GetSubscriptionRequest, out *GetSubscriptionResponse) error {
	return h.LogisticsServiceHandler.GetSubscriptionById(ctx, in, out)
}

func (h *logisticsServiceHandler) GetInfoSubscriptions(ctx context.Context, in *FilterSubscriptionRequest, out *GetInfoSubscriptionsResponse) error {
	return h.LogisticsServiceHandler.GetInfoSubscriptions(ctx, in, out)
}

func (h *logisticsServiceHandler) GetSubscriptionSummary(ctx context.Context, in *FilterSubscriptionRequest, out *GetSubscriptionSummaryResponse) error {
	return h.LogisticsServiceHandler.GetSubscriptionSummary(ctx, in, out)
}

func (h *logisticsServiceHandler) GetInventoryData(ctx context.Context, in *FilterSubscriptionRequest, out *GetInvetoryDataResponse) error {
	return h.LogisticsServiceHandler.GetInventoryData(ctx, in, out)
}

func (h *logisticsServiceHandler) GetInventoryCustomers(ctx context.Context, in *FilterSubscriptionRequest, out *GetInvetoryCustomersResponse) error {
	return h.LogisticsServiceHandler.GetInventoryCustomers(ctx, in, out)
}

func (h *logisticsServiceHandler) CreateSlot(ctx context.Context, in *CreateSlotRequest, out *CreateSlotResponse) error {
	return h.LogisticsServiceHandler.CreateSlot(ctx, in, out)
}

func (h *logisticsServiceHandler) UpdateSlot(ctx context.Context, in *UpdateSlotRequest, out *UpdateSlotResponse) error {
	return h.LogisticsServiceHandler.UpdateSlot(ctx, in, out)
}

func (h *logisticsServiceHandler) GetCitySlots(ctx context.Context, in *GetSlotRequest, out *GetSlotsResponse) error {
	return h.LogisticsServiceHandler.GetCitySlots(ctx, in, out)
}

func (h *logisticsServiceHandler) GetSlotById(ctx context.Context, in *GetSlotRequest, out *GetSlotResponse) error {
	return h.LogisticsServiceHandler.GetSlotById(ctx, in, out)
}

func (h *logisticsServiceHandler) DeleteSlotById(ctx context.Context, in *GetSlotRequest, out *UpdateSlotResponse) error {
	return h.LogisticsServiceHandler.DeleteSlotById(ctx, in, out)
}

func (h *logisticsServiceHandler) CreateAgent(ctx context.Context, in *CreateAgentRequest, out *CreateAgentResponse) error {
	return h.LogisticsServiceHandler.CreateAgent(ctx, in, out)
}

func (h *logisticsServiceHandler) UpdateAgent(ctx context.Context, in *UpdateAgentRequest, out *UpdateAgentResponse) error {
	return h.LogisticsServiceHandler.UpdateAgent(ctx, in, out)
}

func (h *logisticsServiceHandler) UpdateAgentStatus(ctx context.Context, in *UpdateAgentRequest, out *UpdateAgentResponse) error {
	return h.LogisticsServiceHandler.UpdateAgentStatus(ctx, in, out)
}

func (h *logisticsServiceHandler) UpdateAgentLocation(ctx context.Context, in *UpdateAgentRequest, out *UpdateAgentResponse) error {
	return h.LogisticsServiceHandler.UpdateAgentLocation(ctx, in, out)
}

func (h *logisticsServiceHandler) UpdateAgentAvatar(ctx context.Context, in *UpdateAgentRequest, out *UpdateAgentResponse) error {
	return h.LogisticsServiceHandler.UpdateAgentAvatar(ctx, in, out)
}

func (h *logisticsServiceHandler) GetAgentsOfCity(ctx context.Context, in *GetAgentRequest, out *GetAgentsResponse) error {
	return h.LogisticsServiceHandler.GetAgentsOfCity(ctx, in, out)
}

func (h *logisticsServiceHandler) FilterAgent(ctx context.Context, in *FilterAgentRequest, out *GetAgentsResponse) error {
	return h.LogisticsServiceHandler.FilterAgent(ctx, in, out)
}

func (h *logisticsServiceHandler) GetAgentById(ctx context.Context, in *GetAgentRequest, out *GetAgentResponse) error {
	return h.LogisticsServiceHandler.GetAgentById(ctx, in, out)
}

func (h *logisticsServiceHandler) VerifyAgent(ctx context.Context, in *GetAgentRequest, out *GetAgentResponse) error {
	return h.LogisticsServiceHandler.VerifyAgent(ctx, in, out)
}

func (h *logisticsServiceHandler) InitAgentHome(ctx context.Context, in *GetAgentRequest, out *AgentHomeData) error {
	return h.LogisticsServiceHandler.InitAgentHome(ctx, in, out)
}

func (h *logisticsServiceHandler) AgentProfileData(ctx context.Context, in *GetAgentRequest, out *AgentProfileResponse) error {
	return h.LogisticsServiceHandler.AgentProfileData(ctx, in, out)
}

func (h *logisticsServiceHandler) CreateRoute(ctx context.Context, in *CreateRouteRequest, out *CreateRouteResponse) error {
	return h.LogisticsServiceHandler.CreateRoute(ctx, in, out)
}

func (h *logisticsServiceHandler) UpdateRoute(ctx context.Context, in *UpdateRouteRequest, out *UpdateRouteResponse) error {
	return h.LogisticsServiceHandler.UpdateRoute(ctx, in, out)
}

func (h *logisticsServiceHandler) GetRoutesOfHub(ctx context.Context, in *GetRouteRequest, out *GetRoutesResponse) error {
	return h.LogisticsServiceHandler.GetRoutesOfHub(ctx, in, out)
}

func (h *logisticsServiceHandler) GetRoutesOfCity(ctx context.Context, in *GetRouteRequest, out *GetRoutesResponse) error {
	return h.LogisticsServiceHandler.GetRoutesOfCity(ctx, in, out)
}

func (h *logisticsServiceHandler) GetRouteById(ctx context.Context, in *GetRouteRequest, out *GetRouteResponse) error {
	return h.LogisticsServiceHandler.GetRouteById(ctx, in, out)
}

func (h *logisticsServiceHandler) AssignRouteAgent(ctx context.Context, in *AssignRouteAgentRequest, out *UpdateRouteResponse) error {
	return h.LogisticsServiceHandler.AssignRouteAgent(ctx, in, out)
}

func (h *logisticsServiceHandler) AssignRouteVehicle(ctx context.Context, in *AssignRouteVehicleRequest, out *UpdateRouteResponse) error {
	return h.LogisticsServiceHandler.AssignRouteVehicle(ctx, in, out)
}

func (h *logisticsServiceHandler) SaveRouteNode(ctx context.Context, in *SaveRouteNodeRequest, out *UpdateRouteResponse) error {
	return h.LogisticsServiceHandler.SaveRouteNode(ctx, in, out)
}

func (h *logisticsServiceHandler) GetRouteNodeOfRoute(ctx context.Context, in *GetRouteNodeRequest, out *GetRouteNodeResponse) error {
	return h.LogisticsServiceHandler.GetRouteNodeOfRoute(ctx, in, out)
}

func (h *logisticsServiceHandler) MakeTaskFromRoute(ctx context.Context, in *MakeTaskFromRouteRequest, out *MakeTaskFromRouteResponse) error {
	return h.LogisticsServiceHandler.MakeTaskFromRoute(ctx, in, out)
}

func (h *logisticsServiceHandler) UpdateRouteTask(ctx context.Context, in *UpdateRouteTaskRequest, out *UpdateRouteResponse) error {
	return h.LogisticsServiceHandler.UpdateRouteTask(ctx, in, out)
}

func (h *logisticsServiceHandler) GetRouteTask(ctx context.Context, in *GetRouteTaskRequest, out *GetRouteTasksResponse) error {
	return h.LogisticsServiceHandler.GetRouteTask(ctx, in, out)
}

func (h *logisticsServiceHandler) GetRouteTaskById(ctx context.Context, in *GetRouteTaskRequest, out *GetRouteTaskResponse) error {
	return h.LogisticsServiceHandler.GetRouteTaskById(ctx, in, out)
}

func (h *logisticsServiceHandler) GetTaskPoints(ctx context.Context, in *GetTaskPointRequest, out *GetTaskPointsResponse) error {
	return h.LogisticsServiceHandler.GetTaskPoints(ctx, in, out)
}

func (h *logisticsServiceHandler) GetTaskPointById(ctx context.Context, in *GetTaskPointRequest, out *GetTaskPointResponse) error {
	return h.LogisticsServiceHandler.GetTaskPointById(ctx, in, out)
}

func (h *logisticsServiceHandler) CreateTaskFromPoints(ctx context.Context, in *CreateTaskRequest, out *CreateTaskResponse) error {
	return h.LogisticsServiceHandler.CreateTaskFromPoints(ctx, in, out)
}

func (h *logisticsServiceHandler) AssignTaskAgent(ctx context.Context, in *AssignTaskAgentRequest, out *UpdateRouteResponse) error {
	return h.LogisticsServiceHandler.AssignTaskAgent(ctx, in, out)
}

func (h *logisticsServiceHandler) TransferTaskPoint(ctx context.Context, in *TansferTaskPointRequest, out *UpdateRouteResponse) error {
	return h.LogisticsServiceHandler.TransferTaskPoint(ctx, in, out)
}

func (h *logisticsServiceHandler) AppHomeData(ctx context.Context, in *GetRouteTaskRequest, out *GetAppHomeResponse) error {
	return h.LogisticsServiceHandler.AppHomeData(ctx, in, out)
}

func (h *logisticsServiceHandler) CreateLocation(ctx context.Context, in *CreateLocationRequest, out *CreateLocationResponse) error {
	return h.LogisticsServiceHandler.CreateLocation(ctx, in, out)
}

func (h *logisticsServiceHandler) UpdateLocation(ctx context.Context, in *UpdateLocationRequest, out *UpdateLocationResponse) error {
	return h.LogisticsServiceHandler.UpdateLocation(ctx, in, out)
}

func (h *logisticsServiceHandler) CityLocations(ctx context.Context, in *GetLocationRequest, out *GetLocationsResponse) error {
	return h.LogisticsServiceHandler.CityLocations(ctx, in, out)
}

func (h *logisticsServiceHandler) GetLocationById(ctx context.Context, in *GetLocationRequest, out *GetLocationResponse) error {
	return h.LogisticsServiceHandler.GetLocationById(ctx, in, out)
}

func (h *logisticsServiceHandler) CreateVehicle(ctx context.Context, in *CreateVehicleRequest, out *CreateVehicleResponse) error {
	return h.LogisticsServiceHandler.CreateVehicle(ctx, in, out)
}

func (h *logisticsServiceHandler) UpdateVehicle(ctx context.Context, in *UpdateVehicleRequest, out *UpdateVehicleResponse) error {
	return h.LogisticsServiceHandler.UpdateVehicle(ctx, in, out)
}

func (h *logisticsServiceHandler) UpdateVehicleImage(ctx context.Context, in *UpdateVehicleRequest, out *UpdateVehicleResponse) error {
	return h.LogisticsServiceHandler.UpdateVehicleImage(ctx, in, out)
}

func (h *logisticsServiceHandler) UpdateVehicleLocation(ctx context.Context, in *UpdateVehicleRequest, out *UpdateVehicleResponse) error {
	return h.LogisticsServiceHandler.UpdateVehicleLocation(ctx, in, out)
}

func (h *logisticsServiceHandler) GetVehicle(ctx context.Context, in *GetVehicleRequest, out *GetVehicleResponse) error {
	return h.LogisticsServiceHandler.GetVehicle(ctx, in, out)
}

func (h *logisticsServiceHandler) GetVehiclesOfCity(ctx context.Context, in *GetVehicleRequest, out *GetVehiclesResponse) error {
	return h.LogisticsServiceHandler.GetVehiclesOfCity(ctx, in, out)
}

func (h *logisticsServiceHandler) GetTrackingData(ctx context.Context, in *GetTrackingDataRequest, out *GetTrackingDataResponse) error {
	return h.LogisticsServiceHandler.GetTrackingData(ctx, in, out)
}
