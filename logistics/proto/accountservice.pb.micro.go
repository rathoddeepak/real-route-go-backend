// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: accountservice.proto

package justify

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AccountService service

func NewAccountServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AccountService service

type AccountService interface {
	//Customer App Requests
	CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...client.CallOption) (*CreateCompanyResponse, error)
	LoginCompany(ctx context.Context, in *LoginCompanyRequest, opts ...client.CallOption) (*LoginCompanyResponse, error)
	VerifyCompanyOTP(ctx context.Context, in *VerifyCompanyOTPRequest, opts ...client.CallOption) (*VerifyCompanyOTPResponse, error)
	UpdateCompany(ctx context.Context, in *UpdateCompanyRequest, opts ...client.CallOption) (*CommonResponse, error)
	CompanyPasswordReset(ctx context.Context, in *CompanyPasswordResetRequest, opts ...client.CallOption) (*CommonResponse, error)
	GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...client.CallOption) (*GetCompanyResponse, error)
	GetCompanies(ctx context.Context, in *GetCompanyRequest, opts ...client.CallOption) (*GetCompaniesResponse, error)
	UpdateCompanySetting(ctx context.Context, in *UpdateCompanySettingRequest, opts ...client.CallOption) (*CommonResponse, error)
	GetRazorpayPlans(ctx context.Context, in *GetRazorPayPlansRequest, opts ...client.CallOption) (*GetRazorPayPlansResponse, error)
	CreateCompanyBilling(ctx context.Context, in *CreateCompanyBillingRequest, opts ...client.CallOption) (*CreateCompanyBillingResponse, error)
	ValidateCompanyBilling(ctx context.Context, in *ValidateCompanyBillingRequest, opts ...client.CallOption) (*ValidateCompanyBillingResponse, error)
	MarkCompanyBillingStatus(ctx context.Context, in *MarkCompanyBillingStatusRequest, opts ...client.CallOption) (*CommonResponse, error)
	//Customer App Requests
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error)
	VerifyOTP(ctx context.Context, in *VerifyOTPRequest, opts ...client.CallOption) (*VerifyOTPResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*CommonResponse, error)
	SearchUsers(ctx context.Context, in *SearchUserRequest, opts ...client.CallOption) (*GetUsersReponse, error)
	GetUserById(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*GetUserReponse, error)
	//Admin
	AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...client.CallOption) (*AdminLoginResponse, error)
	AdminVerify(ctx context.Context, in *AdminVerifyRequest, opts ...client.CallOption) (*AdminVerifyResponse, error)
	AdminCreateUser(ctx context.Context, in *AdminCreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error)
	AdminUpdateUser(ctx context.Context, in *AdminUpdateUserRequest, opts ...client.CallOption) (*CommonResponse, error)
	//Wallet
	CreditWallet(ctx context.Context, in *WalletTxnRequest, opts ...client.CallOption) (*TxnResponse, error)
	DebitWallet(ctx context.Context, in *WalletTxnRequest, opts ...client.CallOption) (*TxnResponse, error)
	GetTxns(ctx context.Context, in *GetTxnRequest, opts ...client.CallOption) (*GetTxnsResponse, error)
	GetTxnById(ctx context.Context, in *GetTxnRequest, opts ...client.CallOption) (*GetTxnResponse, error)
	//Address Methods
	CreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...client.CallOption) (*CreateAddressResponse, error)
	UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...client.CallOption) (*UpdateAddressResponse, error)
	UpdateAddressLocation(ctx context.Context, in *UpdateAddressLocationRequest, opts ...client.CallOption) (*UpdateAddressResponse, error)
	UpdateAddressStatus(ctx context.Context, in *UpdateAddressStatusRequest, opts ...client.CallOption) (*UpdateAddressResponse, error)
	GetAddressesOfUser(ctx context.Context, in *GetAddressRequest, opts ...client.CallOption) (*GetAddressesResponse, error)
	GetAddressById(ctx context.Context, in *GetAddressRequest, opts ...client.CallOption) (*GetAddressResponse, error)
}

type accountService struct {
	c    client.Client
	name string
}

func NewAccountService(name string, c client.Client) AccountService {
	return &accountService{
		c:    c,
		name: name,
	}
}

func (c *accountService) CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...client.CallOption) (*CreateCompanyResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.CreateCompany", in)
	out := new(CreateCompanyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) LoginCompany(ctx context.Context, in *LoginCompanyRequest, opts ...client.CallOption) (*LoginCompanyResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.LoginCompany", in)
	out := new(LoginCompanyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) VerifyCompanyOTP(ctx context.Context, in *VerifyCompanyOTPRequest, opts ...client.CallOption) (*VerifyCompanyOTPResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.VerifyCompanyOTP", in)
	out := new(VerifyCompanyOTPResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UpdateCompany(ctx context.Context, in *UpdateCompanyRequest, opts ...client.CallOption) (*CommonResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.UpdateCompany", in)
	out := new(CommonResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) CompanyPasswordReset(ctx context.Context, in *CompanyPasswordResetRequest, opts ...client.CallOption) (*CommonResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.CompanyPasswordReset", in)
	out := new(CommonResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...client.CallOption) (*GetCompanyResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.GetCompany", in)
	out := new(GetCompanyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetCompanies(ctx context.Context, in *GetCompanyRequest, opts ...client.CallOption) (*GetCompaniesResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.GetCompanies", in)
	out := new(GetCompaniesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UpdateCompanySetting(ctx context.Context, in *UpdateCompanySettingRequest, opts ...client.CallOption) (*CommonResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.UpdateCompanySetting", in)
	out := new(CommonResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetRazorpayPlans(ctx context.Context, in *GetRazorPayPlansRequest, opts ...client.CallOption) (*GetRazorPayPlansResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.GetRazorpayPlans", in)
	out := new(GetRazorPayPlansResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) CreateCompanyBilling(ctx context.Context, in *CreateCompanyBillingRequest, opts ...client.CallOption) (*CreateCompanyBillingResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.CreateCompanyBilling", in)
	out := new(CreateCompanyBillingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) ValidateCompanyBilling(ctx context.Context, in *ValidateCompanyBillingRequest, opts ...client.CallOption) (*ValidateCompanyBillingResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.ValidateCompanyBilling", in)
	out := new(ValidateCompanyBillingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) MarkCompanyBillingStatus(ctx context.Context, in *MarkCompanyBillingStatusRequest, opts ...client.CallOption) (*CommonResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.MarkCompanyBillingStatus", in)
	out := new(CommonResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.CreateUser", in)
	out := new(CreateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) VerifyOTP(ctx context.Context, in *VerifyOTPRequest, opts ...client.CallOption) (*VerifyOTPResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.VerifyOTP", in)
	out := new(VerifyOTPResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*CommonResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.UpdateUser", in)
	out := new(CommonResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) SearchUsers(ctx context.Context, in *SearchUserRequest, opts ...client.CallOption) (*GetUsersReponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.SearchUsers", in)
	out := new(GetUsersReponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetUserById(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*GetUserReponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.GetUserById", in)
	out := new(GetUserReponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...client.CallOption) (*AdminLoginResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.AdminLogin", in)
	out := new(AdminLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) AdminVerify(ctx context.Context, in *AdminVerifyRequest, opts ...client.CallOption) (*AdminVerifyResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.AdminVerify", in)
	out := new(AdminVerifyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) AdminCreateUser(ctx context.Context, in *AdminCreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.AdminCreateUser", in)
	out := new(CreateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) AdminUpdateUser(ctx context.Context, in *AdminUpdateUserRequest, opts ...client.CallOption) (*CommonResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.AdminUpdateUser", in)
	out := new(CommonResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) CreditWallet(ctx context.Context, in *WalletTxnRequest, opts ...client.CallOption) (*TxnResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.CreditWallet", in)
	out := new(TxnResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) DebitWallet(ctx context.Context, in *WalletTxnRequest, opts ...client.CallOption) (*TxnResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.DebitWallet", in)
	out := new(TxnResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetTxns(ctx context.Context, in *GetTxnRequest, opts ...client.CallOption) (*GetTxnsResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.GetTxns", in)
	out := new(GetTxnsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetTxnById(ctx context.Context, in *GetTxnRequest, opts ...client.CallOption) (*GetTxnResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.GetTxnById", in)
	out := new(GetTxnResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) CreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...client.CallOption) (*CreateAddressResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.CreateAddress", in)
	out := new(CreateAddressResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...client.CallOption) (*UpdateAddressResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.UpdateAddress", in)
	out := new(UpdateAddressResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UpdateAddressLocation(ctx context.Context, in *UpdateAddressLocationRequest, opts ...client.CallOption) (*UpdateAddressResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.UpdateAddressLocation", in)
	out := new(UpdateAddressResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UpdateAddressStatus(ctx context.Context, in *UpdateAddressStatusRequest, opts ...client.CallOption) (*UpdateAddressResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.UpdateAddressStatus", in)
	out := new(UpdateAddressResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetAddressesOfUser(ctx context.Context, in *GetAddressRequest, opts ...client.CallOption) (*GetAddressesResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.GetAddressesOfUser", in)
	out := new(GetAddressesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetAddressById(ctx context.Context, in *GetAddressRequest, opts ...client.CallOption) (*GetAddressResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.GetAddressById", in)
	out := new(GetAddressResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountService service

type AccountServiceHandler interface {
	//Customer App Requests
	CreateCompany(context.Context, *CreateCompanyRequest, *CreateCompanyResponse) error
	LoginCompany(context.Context, *LoginCompanyRequest, *LoginCompanyResponse) error
	VerifyCompanyOTP(context.Context, *VerifyCompanyOTPRequest, *VerifyCompanyOTPResponse) error
	UpdateCompany(context.Context, *UpdateCompanyRequest, *CommonResponse) error
	CompanyPasswordReset(context.Context, *CompanyPasswordResetRequest, *CommonResponse) error
	GetCompany(context.Context, *GetCompanyRequest, *GetCompanyResponse) error
	GetCompanies(context.Context, *GetCompanyRequest, *GetCompaniesResponse) error
	UpdateCompanySetting(context.Context, *UpdateCompanySettingRequest, *CommonResponse) error
	GetRazorpayPlans(context.Context, *GetRazorPayPlansRequest, *GetRazorPayPlansResponse) error
	CreateCompanyBilling(context.Context, *CreateCompanyBillingRequest, *CreateCompanyBillingResponse) error
	ValidateCompanyBilling(context.Context, *ValidateCompanyBillingRequest, *ValidateCompanyBillingResponse) error
	MarkCompanyBillingStatus(context.Context, *MarkCompanyBillingStatusRequest, *CommonResponse) error
	//Customer App Requests
	CreateUser(context.Context, *CreateUserRequest, *CreateUserResponse) error
	VerifyOTP(context.Context, *VerifyOTPRequest, *VerifyOTPResponse) error
	UpdateUser(context.Context, *UpdateUserRequest, *CommonResponse) error
	SearchUsers(context.Context, *SearchUserRequest, *GetUsersReponse) error
	GetUserById(context.Context, *GetUserRequest, *GetUserReponse) error
	//Admin
	AdminLogin(context.Context, *AdminLoginRequest, *AdminLoginResponse) error
	AdminVerify(context.Context, *AdminVerifyRequest, *AdminVerifyResponse) error
	AdminCreateUser(context.Context, *AdminCreateUserRequest, *CreateUserResponse) error
	AdminUpdateUser(context.Context, *AdminUpdateUserRequest, *CommonResponse) error
	//Wallet
	CreditWallet(context.Context, *WalletTxnRequest, *TxnResponse) error
	DebitWallet(context.Context, *WalletTxnRequest, *TxnResponse) error
	GetTxns(context.Context, *GetTxnRequest, *GetTxnsResponse) error
	GetTxnById(context.Context, *GetTxnRequest, *GetTxnResponse) error
	//Address Methods
	CreateAddress(context.Context, *CreateAddressRequest, *CreateAddressResponse) error
	UpdateAddress(context.Context, *UpdateAddressRequest, *UpdateAddressResponse) error
	UpdateAddressLocation(context.Context, *UpdateAddressLocationRequest, *UpdateAddressResponse) error
	UpdateAddressStatus(context.Context, *UpdateAddressStatusRequest, *UpdateAddressResponse) error
	GetAddressesOfUser(context.Context, *GetAddressRequest, *GetAddressesResponse) error
	GetAddressById(context.Context, *GetAddressRequest, *GetAddressResponse) error
}

func RegisterAccountServiceHandler(s server.Server, hdlr AccountServiceHandler, opts ...server.HandlerOption) error {
	type accountService interface {
		CreateCompany(ctx context.Context, in *CreateCompanyRequest, out *CreateCompanyResponse) error
		LoginCompany(ctx context.Context, in *LoginCompanyRequest, out *LoginCompanyResponse) error
		VerifyCompanyOTP(ctx context.Context, in *VerifyCompanyOTPRequest, out *VerifyCompanyOTPResponse) error
		UpdateCompany(ctx context.Context, in *UpdateCompanyRequest, out *CommonResponse) error
		CompanyPasswordReset(ctx context.Context, in *CompanyPasswordResetRequest, out *CommonResponse) error
		GetCompany(ctx context.Context, in *GetCompanyRequest, out *GetCompanyResponse) error
		GetCompanies(ctx context.Context, in *GetCompanyRequest, out *GetCompaniesResponse) error
		UpdateCompanySetting(ctx context.Context, in *UpdateCompanySettingRequest, out *CommonResponse) error
		GetRazorpayPlans(ctx context.Context, in *GetRazorPayPlansRequest, out *GetRazorPayPlansResponse) error
		CreateCompanyBilling(ctx context.Context, in *CreateCompanyBillingRequest, out *CreateCompanyBillingResponse) error
		ValidateCompanyBilling(ctx context.Context, in *ValidateCompanyBillingRequest, out *ValidateCompanyBillingResponse) error
		MarkCompanyBillingStatus(ctx context.Context, in *MarkCompanyBillingStatusRequest, out *CommonResponse) error
		CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error
		VerifyOTP(ctx context.Context, in *VerifyOTPRequest, out *VerifyOTPResponse) error
		UpdateUser(ctx context.Context, in *UpdateUserRequest, out *CommonResponse) error
		SearchUsers(ctx context.Context, in *SearchUserRequest, out *GetUsersReponse) error
		GetUserById(ctx context.Context, in *GetUserRequest, out *GetUserReponse) error
		AdminLogin(ctx context.Context, in *AdminLoginRequest, out *AdminLoginResponse) error
		AdminVerify(ctx context.Context, in *AdminVerifyRequest, out *AdminVerifyResponse) error
		AdminCreateUser(ctx context.Context, in *AdminCreateUserRequest, out *CreateUserResponse) error
		AdminUpdateUser(ctx context.Context, in *AdminUpdateUserRequest, out *CommonResponse) error
		CreditWallet(ctx context.Context, in *WalletTxnRequest, out *TxnResponse) error
		DebitWallet(ctx context.Context, in *WalletTxnRequest, out *TxnResponse) error
		GetTxns(ctx context.Context, in *GetTxnRequest, out *GetTxnsResponse) error
		GetTxnById(ctx context.Context, in *GetTxnRequest, out *GetTxnResponse) error
		CreateAddress(ctx context.Context, in *CreateAddressRequest, out *CreateAddressResponse) error
		UpdateAddress(ctx context.Context, in *UpdateAddressRequest, out *UpdateAddressResponse) error
		UpdateAddressLocation(ctx context.Context, in *UpdateAddressLocationRequest, out *UpdateAddressResponse) error
		UpdateAddressStatus(ctx context.Context, in *UpdateAddressStatusRequest, out *UpdateAddressResponse) error
		GetAddressesOfUser(ctx context.Context, in *GetAddressRequest, out *GetAddressesResponse) error
		GetAddressById(ctx context.Context, in *GetAddressRequest, out *GetAddressResponse) error
	}
	type AccountService struct {
		accountService
	}
	h := &accountServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AccountService{h}, opts...))
}

type accountServiceHandler struct {
	AccountServiceHandler
}

func (h *accountServiceHandler) CreateCompany(ctx context.Context, in *CreateCompanyRequest, out *CreateCompanyResponse) error {
	return h.AccountServiceHandler.CreateCompany(ctx, in, out)
}

func (h *accountServiceHandler) LoginCompany(ctx context.Context, in *LoginCompanyRequest, out *LoginCompanyResponse) error {
	return h.AccountServiceHandler.LoginCompany(ctx, in, out)
}

func (h *accountServiceHandler) VerifyCompanyOTP(ctx context.Context, in *VerifyCompanyOTPRequest, out *VerifyCompanyOTPResponse) error {
	return h.AccountServiceHandler.VerifyCompanyOTP(ctx, in, out)
}

func (h *accountServiceHandler) UpdateCompany(ctx context.Context, in *UpdateCompanyRequest, out *CommonResponse) error {
	return h.AccountServiceHandler.UpdateCompany(ctx, in, out)
}

func (h *accountServiceHandler) CompanyPasswordReset(ctx context.Context, in *CompanyPasswordResetRequest, out *CommonResponse) error {
	return h.AccountServiceHandler.CompanyPasswordReset(ctx, in, out)
}

func (h *accountServiceHandler) GetCompany(ctx context.Context, in *GetCompanyRequest, out *GetCompanyResponse) error {
	return h.AccountServiceHandler.GetCompany(ctx, in, out)
}

func (h *accountServiceHandler) GetCompanies(ctx context.Context, in *GetCompanyRequest, out *GetCompaniesResponse) error {
	return h.AccountServiceHandler.GetCompanies(ctx, in, out)
}

func (h *accountServiceHandler) UpdateCompanySetting(ctx context.Context, in *UpdateCompanySettingRequest, out *CommonResponse) error {
	return h.AccountServiceHandler.UpdateCompanySetting(ctx, in, out)
}

func (h *accountServiceHandler) GetRazorpayPlans(ctx context.Context, in *GetRazorPayPlansRequest, out *GetRazorPayPlansResponse) error {
	return h.AccountServiceHandler.GetRazorpayPlans(ctx, in, out)
}

func (h *accountServiceHandler) CreateCompanyBilling(ctx context.Context, in *CreateCompanyBillingRequest, out *CreateCompanyBillingResponse) error {
	return h.AccountServiceHandler.CreateCompanyBilling(ctx, in, out)
}

func (h *accountServiceHandler) ValidateCompanyBilling(ctx context.Context, in *ValidateCompanyBillingRequest, out *ValidateCompanyBillingResponse) error {
	return h.AccountServiceHandler.ValidateCompanyBilling(ctx, in, out)
}

func (h *accountServiceHandler) MarkCompanyBillingStatus(ctx context.Context, in *MarkCompanyBillingStatusRequest, out *CommonResponse) error {
	return h.AccountServiceHandler.MarkCompanyBillingStatus(ctx, in, out)
}

func (h *accountServiceHandler) CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error {
	return h.AccountServiceHandler.CreateUser(ctx, in, out)
}

func (h *accountServiceHandler) VerifyOTP(ctx context.Context, in *VerifyOTPRequest, out *VerifyOTPResponse) error {
	return h.AccountServiceHandler.VerifyOTP(ctx, in, out)
}

func (h *accountServiceHandler) UpdateUser(ctx context.Context, in *UpdateUserRequest, out *CommonResponse) error {
	return h.AccountServiceHandler.UpdateUser(ctx, in, out)
}

func (h *accountServiceHandler) SearchUsers(ctx context.Context, in *SearchUserRequest, out *GetUsersReponse) error {
	return h.AccountServiceHandler.SearchUsers(ctx, in, out)
}

func (h *accountServiceHandler) GetUserById(ctx context.Context, in *GetUserRequest, out *GetUserReponse) error {
	return h.AccountServiceHandler.GetUserById(ctx, in, out)
}

func (h *accountServiceHandler) AdminLogin(ctx context.Context, in *AdminLoginRequest, out *AdminLoginResponse) error {
	return h.AccountServiceHandler.AdminLogin(ctx, in, out)
}

func (h *accountServiceHandler) AdminVerify(ctx context.Context, in *AdminVerifyRequest, out *AdminVerifyResponse) error {
	return h.AccountServiceHandler.AdminVerify(ctx, in, out)
}

func (h *accountServiceHandler) AdminCreateUser(ctx context.Context, in *AdminCreateUserRequest, out *CreateUserResponse) error {
	return h.AccountServiceHandler.AdminCreateUser(ctx, in, out)
}

func (h *accountServiceHandler) AdminUpdateUser(ctx context.Context, in *AdminUpdateUserRequest, out *CommonResponse) error {
	return h.AccountServiceHandler.AdminUpdateUser(ctx, in, out)
}

func (h *accountServiceHandler) CreditWallet(ctx context.Context, in *WalletTxnRequest, out *TxnResponse) error {
	return h.AccountServiceHandler.CreditWallet(ctx, in, out)
}

func (h *accountServiceHandler) DebitWallet(ctx context.Context, in *WalletTxnRequest, out *TxnResponse) error {
	return h.AccountServiceHandler.DebitWallet(ctx, in, out)
}

func (h *accountServiceHandler) GetTxns(ctx context.Context, in *GetTxnRequest, out *GetTxnsResponse) error {
	return h.AccountServiceHandler.GetTxns(ctx, in, out)
}

func (h *accountServiceHandler) GetTxnById(ctx context.Context, in *GetTxnRequest, out *GetTxnResponse) error {
	return h.AccountServiceHandler.GetTxnById(ctx, in, out)
}

func (h *accountServiceHandler) CreateAddress(ctx context.Context, in *CreateAddressRequest, out *CreateAddressResponse) error {
	return h.AccountServiceHandler.CreateAddress(ctx, in, out)
}

func (h *accountServiceHandler) UpdateAddress(ctx context.Context, in *UpdateAddressRequest, out *UpdateAddressResponse) error {
	return h.AccountServiceHandler.UpdateAddress(ctx, in, out)
}

func (h *accountServiceHandler) UpdateAddressLocation(ctx context.Context, in *UpdateAddressLocationRequest, out *UpdateAddressResponse) error {
	return h.AccountServiceHandler.UpdateAddressLocation(ctx, in, out)
}

func (h *accountServiceHandler) UpdateAddressStatus(ctx context.Context, in *UpdateAddressStatusRequest, out *UpdateAddressResponse) error {
	return h.AccountServiceHandler.UpdateAddressStatus(ctx, in, out)
}

func (h *accountServiceHandler) GetAddressesOfUser(ctx context.Context, in *GetAddressRequest, out *GetAddressesResponse) error {
	return h.AccountServiceHandler.GetAddressesOfUser(ctx, in, out)
}

func (h *accountServiceHandler) GetAddressById(ctx context.Context, in *GetAddressRequest, out *GetAddressResponse) error {
	return h.AccountServiceHandler.GetAddressById(ctx, in, out)
}
