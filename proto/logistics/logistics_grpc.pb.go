// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: logistics.proto

package justify

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogisticsServiceClient is the client API for LogisticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogisticsServiceClient interface {
	//Logistics Subscription Methods
	CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*CreateSubscriptionResponse, error)
	UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...grpc.CallOption) (*UpdateSubscriptionResponse, error)
	UpdateSubscriptionStatus(ctx context.Context, in *UpdateSubscriptionRequest, opts ...grpc.CallOption) (*UpdateSubscriptionResponse, error)
	GetSubscriptionById(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error)
	//Complex Logitics Call
	GetInfoSubscriptions(ctx context.Context, in *FilterSubscriptionRequest, opts ...grpc.CallOption) (*GetInfoSubscriptionsResponse, error)
	GetSubscriptionSummary(ctx context.Context, in *FilterSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionSummaryResponse, error)
	GetInventoryData(ctx context.Context, in *FilterSubscriptionRequest, opts ...grpc.CallOption) (*GetInvetoryDataResponse, error)
	GetInventoryCustomers(ctx context.Context, in *FilterSubscriptionRequest, opts ...grpc.CallOption) (*GetInvetoryCustomersResponse, error)
	//Slot Methods
	CreateSlot(ctx context.Context, in *CreateSlotRequest, opts ...grpc.CallOption) (*CreateSlotResponse, error)
	UpdateSlot(ctx context.Context, in *UpdateSlotRequest, opts ...grpc.CallOption) (*UpdateSlotResponse, error)
	GetCitySlots(ctx context.Context, in *GetSlotRequest, opts ...grpc.CallOption) (*GetSlotsResponse, error)
	GetSlotById(ctx context.Context, in *GetSlotRequest, opts ...grpc.CallOption) (*GetSlotResponse, error)
	DeleteSlotById(ctx context.Context, in *GetSlotRequest, opts ...grpc.CallOption) (*UpdateSlotResponse, error)
	//Agent Methods
	CreateAgent(ctx context.Context, in *CreateAgentRequest, opts ...grpc.CallOption) (*CreateAgentResponse, error)
	UpdateAgent(ctx context.Context, in *UpdateAgentRequest, opts ...grpc.CallOption) (*UpdateAgentResponse, error)
	UpdateAgentStatus(ctx context.Context, in *UpdateAgentRequest, opts ...grpc.CallOption) (*UpdateAgentResponse, error)
	UpdateAgentLocation(ctx context.Context, in *UpdateAgentRequest, opts ...grpc.CallOption) (*UpdateAgentResponse, error)
	UpdateAgentAvatar(ctx context.Context, in *UpdateAgentRequest, opts ...grpc.CallOption) (*UpdateAgentResponse, error)
	GetAgentsOfCity(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*GetAgentsResponse, error)
	FilterAgent(ctx context.Context, in *FilterAgentRequest, opts ...grpc.CallOption) (*GetAgentsResponse, error)
	GetAgentById(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*GetAgentResponse, error)
	//Agent App Functions
	VerifyAgent(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*GetAgentResponse, error)
	InitAgentHome(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*AgentHomeData, error)
	AgentProfileData(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*AgentProfileResponse, error)
	//Route Methods
	CreateRoute(ctx context.Context, in *CreateRouteRequest, opts ...grpc.CallOption) (*CreateRouteResponse, error)
	UpdateRoute(ctx context.Context, in *UpdateRouteRequest, opts ...grpc.CallOption) (*UpdateRouteResponse, error)
	GetRoutesOfHub(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*GetRoutesResponse, error)
	GetRoutesOfCity(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*GetRoutesResponse, error)
	GetRouteById(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*GetRouteResponse, error)
	AssignRouteAgent(ctx context.Context, in *AssignRouteAgentRequest, opts ...grpc.CallOption) (*UpdateRouteResponse, error)
	AssignRouteVehicle(ctx context.Context, in *AssignRouteVehicleRequest, opts ...grpc.CallOption) (*UpdateRouteResponse, error)
	//Route Node Methods
	SaveRouteNode(ctx context.Context, in *SaveRouteNodeRequest, opts ...grpc.CallOption) (*UpdateRouteResponse, error)
	GetRouteNodeOfRoute(ctx context.Context, in *GetRouteNodeRequest, opts ...grpc.CallOption) (*GetRouteNodeResponse, error)
	//Task-Route Pipeline and Task Methods
	MakeTaskFromRoute(ctx context.Context, in *MakeTaskFromRouteRequest, opts ...grpc.CallOption) (*MakeTaskFromRouteResponse, error)
	UpdateRouteTask(ctx context.Context, in *UpdateRouteTaskRequest, opts ...grpc.CallOption) (*UpdateRouteResponse, error)
	GetRouteTask(ctx context.Context, in *GetRouteTaskRequest, opts ...grpc.CallOption) (*GetRouteTasksResponse, error)
	GetRouteTaskById(ctx context.Context, in *GetRouteTaskRequest, opts ...grpc.CallOption) (*GetRouteTaskResponse, error)
	//Task Point Methods
	GetTaskPoints(ctx context.Context, in *GetTaskPointRequest, opts ...grpc.CallOption) (*GetTaskPointsResponse, error)
	GetTaskPointById(ctx context.Context, in *GetTaskPointRequest, opts ...grpc.CallOption) (*GetTaskPointResponse, error)
	//Main Logistics Methods
	CreateTaskFromPoints(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	AssignTaskAgent(ctx context.Context, in *AssignTaskAgentRequest, opts ...grpc.CallOption) (*UpdateRouteResponse, error)
	TransferTaskPoint(ctx context.Context, in *TansferTaskPointRequest, opts ...grpc.CallOption) (*UpdateRouteResponse, error)
	//RealRoute Code: Start
	//Locations
	CreateLocation(ctx context.Context, in *CreateLocationRequest, opts ...grpc.CallOption) (*CreateLocationResponse, error)
	UpdateLocation(ctx context.Context, in *UpdateLocationRequest, opts ...grpc.CallOption) (*UpdateLocationResponse, error)
	CityLocations(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationsResponse, error)
	GetLocationById(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error)
	//Vehicle Methods
	CreateVehicle(ctx context.Context, in *CreateVehicleRequest, opts ...grpc.CallOption) (*CreateVehicleResponse, error)
	UpdateVehicle(ctx context.Context, in *UpdateVehicleRequest, opts ...grpc.CallOption) (*UpdateVehicleResponse, error)
	UpdateVehicleImage(ctx context.Context, in *UpdateVehicleRequest, opts ...grpc.CallOption) (*UpdateVehicleResponse, error)
	UpdateVehicleLocation(ctx context.Context, in *UpdateVehicleRequest, opts ...grpc.CallOption) (*UpdateVehicleResponse, error)
	GetVehicle(ctx context.Context, in *GetVehicleRequest, opts ...grpc.CallOption) (*GetVehicleResponse, error)
	GetVehiclesOfCity(ctx context.Context, in *GetVehicleRequest, opts ...grpc.CallOption) (*GetVehiclesResponse, error)
	//Admin App Methods
	AppHomeData(ctx context.Context, in *GetRouteTaskRequest, opts ...grpc.CallOption) (*GetAppHomeResponse, error)
	//Tracking Web Methods
	GetTrackingData(ctx context.Context, in *GetTrackingDataRequest, opts ...grpc.CallOption) (*GetTrackingDataResponse, error)
}

type logisticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogisticsServiceClient(cc grpc.ClientConnInterface) LogisticsServiceClient {
	return &logisticsServiceClient{cc}
}

func (c *logisticsServiceClient) CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*CreateSubscriptionResponse, error) {
	out := new(CreateSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/CreateSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...grpc.CallOption) (*UpdateSubscriptionResponse, error) {
	out := new(UpdateSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/UpdateSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) UpdateSubscriptionStatus(ctx context.Context, in *UpdateSubscriptionRequest, opts ...grpc.CallOption) (*UpdateSubscriptionResponse, error) {
	out := new(UpdateSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/UpdateSubscriptionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) GetSubscriptionById(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error) {
	out := new(GetSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/GetSubscriptionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) GetInfoSubscriptions(ctx context.Context, in *FilterSubscriptionRequest, opts ...grpc.CallOption) (*GetInfoSubscriptionsResponse, error) {
	out := new(GetInfoSubscriptionsResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/GetInfoSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) GetSubscriptionSummary(ctx context.Context, in *FilterSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionSummaryResponse, error) {
	out := new(GetSubscriptionSummaryResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/GetSubscriptionSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) GetInventoryData(ctx context.Context, in *FilterSubscriptionRequest, opts ...grpc.CallOption) (*GetInvetoryDataResponse, error) {
	out := new(GetInvetoryDataResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/GetInventoryData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) GetInventoryCustomers(ctx context.Context, in *FilterSubscriptionRequest, opts ...grpc.CallOption) (*GetInvetoryCustomersResponse, error) {
	out := new(GetInvetoryCustomersResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/GetInventoryCustomers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) CreateSlot(ctx context.Context, in *CreateSlotRequest, opts ...grpc.CallOption) (*CreateSlotResponse, error) {
	out := new(CreateSlotResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/CreateSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) UpdateSlot(ctx context.Context, in *UpdateSlotRequest, opts ...grpc.CallOption) (*UpdateSlotResponse, error) {
	out := new(UpdateSlotResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/UpdateSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) GetCitySlots(ctx context.Context, in *GetSlotRequest, opts ...grpc.CallOption) (*GetSlotsResponse, error) {
	out := new(GetSlotsResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/GetCitySlots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) GetSlotById(ctx context.Context, in *GetSlotRequest, opts ...grpc.CallOption) (*GetSlotResponse, error) {
	out := new(GetSlotResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/GetSlotById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) DeleteSlotById(ctx context.Context, in *GetSlotRequest, opts ...grpc.CallOption) (*UpdateSlotResponse, error) {
	out := new(UpdateSlotResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/DeleteSlotById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) CreateAgent(ctx context.Context, in *CreateAgentRequest, opts ...grpc.CallOption) (*CreateAgentResponse, error) {
	out := new(CreateAgentResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/CreateAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) UpdateAgent(ctx context.Context, in *UpdateAgentRequest, opts ...grpc.CallOption) (*UpdateAgentResponse, error) {
	out := new(UpdateAgentResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/UpdateAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) UpdateAgentStatus(ctx context.Context, in *UpdateAgentRequest, opts ...grpc.CallOption) (*UpdateAgentResponse, error) {
	out := new(UpdateAgentResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/UpdateAgentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) UpdateAgentLocation(ctx context.Context, in *UpdateAgentRequest, opts ...grpc.CallOption) (*UpdateAgentResponse, error) {
	out := new(UpdateAgentResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/UpdateAgentLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) UpdateAgentAvatar(ctx context.Context, in *UpdateAgentRequest, opts ...grpc.CallOption) (*UpdateAgentResponse, error) {
	out := new(UpdateAgentResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/UpdateAgentAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) GetAgentsOfCity(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*GetAgentsResponse, error) {
	out := new(GetAgentsResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/GetAgentsOfCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) FilterAgent(ctx context.Context, in *FilterAgentRequest, opts ...grpc.CallOption) (*GetAgentsResponse, error) {
	out := new(GetAgentsResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/FilterAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) GetAgentById(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*GetAgentResponse, error) {
	out := new(GetAgentResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/GetAgentById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) VerifyAgent(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*GetAgentResponse, error) {
	out := new(GetAgentResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/VerifyAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) InitAgentHome(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*AgentHomeData, error) {
	out := new(AgentHomeData)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/InitAgentHome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) AgentProfileData(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*AgentProfileResponse, error) {
	out := new(AgentProfileResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/AgentProfileData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) CreateRoute(ctx context.Context, in *CreateRouteRequest, opts ...grpc.CallOption) (*CreateRouteResponse, error) {
	out := new(CreateRouteResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/CreateRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) UpdateRoute(ctx context.Context, in *UpdateRouteRequest, opts ...grpc.CallOption) (*UpdateRouteResponse, error) {
	out := new(UpdateRouteResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/UpdateRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) GetRoutesOfHub(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*GetRoutesResponse, error) {
	out := new(GetRoutesResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/GetRoutesOfHub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) GetRoutesOfCity(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*GetRoutesResponse, error) {
	out := new(GetRoutesResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/GetRoutesOfCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) GetRouteById(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*GetRouteResponse, error) {
	out := new(GetRouteResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/GetRouteById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) AssignRouteAgent(ctx context.Context, in *AssignRouteAgentRequest, opts ...grpc.CallOption) (*UpdateRouteResponse, error) {
	out := new(UpdateRouteResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/AssignRouteAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) AssignRouteVehicle(ctx context.Context, in *AssignRouteVehicleRequest, opts ...grpc.CallOption) (*UpdateRouteResponse, error) {
	out := new(UpdateRouteResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/AssignRouteVehicle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) SaveRouteNode(ctx context.Context, in *SaveRouteNodeRequest, opts ...grpc.CallOption) (*UpdateRouteResponse, error) {
	out := new(UpdateRouteResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/SaveRouteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) GetRouteNodeOfRoute(ctx context.Context, in *GetRouteNodeRequest, opts ...grpc.CallOption) (*GetRouteNodeResponse, error) {
	out := new(GetRouteNodeResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/GetRouteNodeOfRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) MakeTaskFromRoute(ctx context.Context, in *MakeTaskFromRouteRequest, opts ...grpc.CallOption) (*MakeTaskFromRouteResponse, error) {
	out := new(MakeTaskFromRouteResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/MakeTaskFromRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) UpdateRouteTask(ctx context.Context, in *UpdateRouteTaskRequest, opts ...grpc.CallOption) (*UpdateRouteResponse, error) {
	out := new(UpdateRouteResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/UpdateRouteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) GetRouteTask(ctx context.Context, in *GetRouteTaskRequest, opts ...grpc.CallOption) (*GetRouteTasksResponse, error) {
	out := new(GetRouteTasksResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/GetRouteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) GetRouteTaskById(ctx context.Context, in *GetRouteTaskRequest, opts ...grpc.CallOption) (*GetRouteTaskResponse, error) {
	out := new(GetRouteTaskResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/GetRouteTaskById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) GetTaskPoints(ctx context.Context, in *GetTaskPointRequest, opts ...grpc.CallOption) (*GetTaskPointsResponse, error) {
	out := new(GetTaskPointsResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/GetTaskPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) GetTaskPointById(ctx context.Context, in *GetTaskPointRequest, opts ...grpc.CallOption) (*GetTaskPointResponse, error) {
	out := new(GetTaskPointResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/GetTaskPointById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) CreateTaskFromPoints(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/CreateTaskFromPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) AssignTaskAgent(ctx context.Context, in *AssignTaskAgentRequest, opts ...grpc.CallOption) (*UpdateRouteResponse, error) {
	out := new(UpdateRouteResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/AssignTaskAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) TransferTaskPoint(ctx context.Context, in *TansferTaskPointRequest, opts ...grpc.CallOption) (*UpdateRouteResponse, error) {
	out := new(UpdateRouteResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/TransferTaskPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) CreateLocation(ctx context.Context, in *CreateLocationRequest, opts ...grpc.CallOption) (*CreateLocationResponse, error) {
	out := new(CreateLocationResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/CreateLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) UpdateLocation(ctx context.Context, in *UpdateLocationRequest, opts ...grpc.CallOption) (*UpdateLocationResponse, error) {
	out := new(UpdateLocationResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/UpdateLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) CityLocations(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationsResponse, error) {
	out := new(GetLocationsResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/CityLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) GetLocationById(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error) {
	out := new(GetLocationResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/GetLocationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) CreateVehicle(ctx context.Context, in *CreateVehicleRequest, opts ...grpc.CallOption) (*CreateVehicleResponse, error) {
	out := new(CreateVehicleResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/CreateVehicle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) UpdateVehicle(ctx context.Context, in *UpdateVehicleRequest, opts ...grpc.CallOption) (*UpdateVehicleResponse, error) {
	out := new(UpdateVehicleResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/UpdateVehicle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) UpdateVehicleImage(ctx context.Context, in *UpdateVehicleRequest, opts ...grpc.CallOption) (*UpdateVehicleResponse, error) {
	out := new(UpdateVehicleResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/UpdateVehicleImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) UpdateVehicleLocation(ctx context.Context, in *UpdateVehicleRequest, opts ...grpc.CallOption) (*UpdateVehicleResponse, error) {
	out := new(UpdateVehicleResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/UpdateVehicleLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) GetVehicle(ctx context.Context, in *GetVehicleRequest, opts ...grpc.CallOption) (*GetVehicleResponse, error) {
	out := new(GetVehicleResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/GetVehicle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) GetVehiclesOfCity(ctx context.Context, in *GetVehicleRequest, opts ...grpc.CallOption) (*GetVehiclesResponse, error) {
	out := new(GetVehiclesResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/GetVehiclesOfCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) AppHomeData(ctx context.Context, in *GetRouteTaskRequest, opts ...grpc.CallOption) (*GetAppHomeResponse, error) {
	out := new(GetAppHomeResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/AppHomeData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) GetTrackingData(ctx context.Context, in *GetTrackingDataRequest, opts ...grpc.CallOption) (*GetTrackingDataResponse, error) {
	out := new(GetTrackingDataResponse)
	err := c.cc.Invoke(ctx, "/justify.LogisticsService/GetTrackingData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogisticsServiceServer is the server API for LogisticsService service.
// All implementations must embed UnimplementedLogisticsServiceServer
// for forward compatibility
type LogisticsServiceServer interface {
	//Logistics Subscription Methods
	CreateSubscription(context.Context, *CreateSubscriptionRequest) (*CreateSubscriptionResponse, error)
	UpdateSubscription(context.Context, *UpdateSubscriptionRequest) (*UpdateSubscriptionResponse, error)
	UpdateSubscriptionStatus(context.Context, *UpdateSubscriptionRequest) (*UpdateSubscriptionResponse, error)
	GetSubscriptionById(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error)
	//Complex Logitics Call
	GetInfoSubscriptions(context.Context, *FilterSubscriptionRequest) (*GetInfoSubscriptionsResponse, error)
	GetSubscriptionSummary(context.Context, *FilterSubscriptionRequest) (*GetSubscriptionSummaryResponse, error)
	GetInventoryData(context.Context, *FilterSubscriptionRequest) (*GetInvetoryDataResponse, error)
	GetInventoryCustomers(context.Context, *FilterSubscriptionRequest) (*GetInvetoryCustomersResponse, error)
	//Slot Methods
	CreateSlot(context.Context, *CreateSlotRequest) (*CreateSlotResponse, error)
	UpdateSlot(context.Context, *UpdateSlotRequest) (*UpdateSlotResponse, error)
	GetCitySlots(context.Context, *GetSlotRequest) (*GetSlotsResponse, error)
	GetSlotById(context.Context, *GetSlotRequest) (*GetSlotResponse, error)
	DeleteSlotById(context.Context, *GetSlotRequest) (*UpdateSlotResponse, error)
	//Agent Methods
	CreateAgent(context.Context, *CreateAgentRequest) (*CreateAgentResponse, error)
	UpdateAgent(context.Context, *UpdateAgentRequest) (*UpdateAgentResponse, error)
	UpdateAgentStatus(context.Context, *UpdateAgentRequest) (*UpdateAgentResponse, error)
	UpdateAgentLocation(context.Context, *UpdateAgentRequest) (*UpdateAgentResponse, error)
	UpdateAgentAvatar(context.Context, *UpdateAgentRequest) (*UpdateAgentResponse, error)
	GetAgentsOfCity(context.Context, *GetAgentRequest) (*GetAgentsResponse, error)
	FilterAgent(context.Context, *FilterAgentRequest) (*GetAgentsResponse, error)
	GetAgentById(context.Context, *GetAgentRequest) (*GetAgentResponse, error)
	//Agent App Functions
	VerifyAgent(context.Context, *GetAgentRequest) (*GetAgentResponse, error)
	InitAgentHome(context.Context, *GetAgentRequest) (*AgentHomeData, error)
	AgentProfileData(context.Context, *GetAgentRequest) (*AgentProfileResponse, error)
	//Route Methods
	CreateRoute(context.Context, *CreateRouteRequest) (*CreateRouteResponse, error)
	UpdateRoute(context.Context, *UpdateRouteRequest) (*UpdateRouteResponse, error)
	GetRoutesOfHub(context.Context, *GetRouteRequest) (*GetRoutesResponse, error)
	GetRoutesOfCity(context.Context, *GetRouteRequest) (*GetRoutesResponse, error)
	GetRouteById(context.Context, *GetRouteRequest) (*GetRouteResponse, error)
	AssignRouteAgent(context.Context, *AssignRouteAgentRequest) (*UpdateRouteResponse, error)
	AssignRouteVehicle(context.Context, *AssignRouteVehicleRequest) (*UpdateRouteResponse, error)
	//Route Node Methods
	SaveRouteNode(context.Context, *SaveRouteNodeRequest) (*UpdateRouteResponse, error)
	GetRouteNodeOfRoute(context.Context, *GetRouteNodeRequest) (*GetRouteNodeResponse, error)
	//Task-Route Pipeline and Task Methods
	MakeTaskFromRoute(context.Context, *MakeTaskFromRouteRequest) (*MakeTaskFromRouteResponse, error)
	UpdateRouteTask(context.Context, *UpdateRouteTaskRequest) (*UpdateRouteResponse, error)
	GetRouteTask(context.Context, *GetRouteTaskRequest) (*GetRouteTasksResponse, error)
	GetRouteTaskById(context.Context, *GetRouteTaskRequest) (*GetRouteTaskResponse, error)
	//Task Point Methods
	GetTaskPoints(context.Context, *GetTaskPointRequest) (*GetTaskPointsResponse, error)
	GetTaskPointById(context.Context, *GetTaskPointRequest) (*GetTaskPointResponse, error)
	//Main Logistics Methods
	CreateTaskFromPoints(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	AssignTaskAgent(context.Context, *AssignTaskAgentRequest) (*UpdateRouteResponse, error)
	TransferTaskPoint(context.Context, *TansferTaskPointRequest) (*UpdateRouteResponse, error)
	//RealRoute Code: Start
	//Locations
	CreateLocation(context.Context, *CreateLocationRequest) (*CreateLocationResponse, error)
	UpdateLocation(context.Context, *UpdateLocationRequest) (*UpdateLocationResponse, error)
	CityLocations(context.Context, *GetLocationRequest) (*GetLocationsResponse, error)
	GetLocationById(context.Context, *GetLocationRequest) (*GetLocationResponse, error)
	//Vehicle Methods
	CreateVehicle(context.Context, *CreateVehicleRequest) (*CreateVehicleResponse, error)
	UpdateVehicle(context.Context, *UpdateVehicleRequest) (*UpdateVehicleResponse, error)
	UpdateVehicleImage(context.Context, *UpdateVehicleRequest) (*UpdateVehicleResponse, error)
	UpdateVehicleLocation(context.Context, *UpdateVehicleRequest) (*UpdateVehicleResponse, error)
	GetVehicle(context.Context, *GetVehicleRequest) (*GetVehicleResponse, error)
	GetVehiclesOfCity(context.Context, *GetVehicleRequest) (*GetVehiclesResponse, error)
	//Admin App Methods
	AppHomeData(context.Context, *GetRouteTaskRequest) (*GetAppHomeResponse, error)
	//Tracking Web Methods
	GetTrackingData(context.Context, *GetTrackingDataRequest) (*GetTrackingDataResponse, error)
	mustEmbedUnimplementedLogisticsServiceServer()
}

// UnimplementedLogisticsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogisticsServiceServer struct {
}

func (UnimplementedLogisticsServiceServer) CreateSubscription(context.Context, *CreateSubscriptionRequest) (*CreateSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscription not implemented")
}
func (UnimplementedLogisticsServiceServer) UpdateSubscription(context.Context, *UpdateSubscriptionRequest) (*UpdateSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscription not implemented")
}
func (UnimplementedLogisticsServiceServer) UpdateSubscriptionStatus(context.Context, *UpdateSubscriptionRequest) (*UpdateSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscriptionStatus not implemented")
}
func (UnimplementedLogisticsServiceServer) GetSubscriptionById(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionById not implemented")
}
func (UnimplementedLogisticsServiceServer) GetInfoSubscriptions(context.Context, *FilterSubscriptionRequest) (*GetInfoSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoSubscriptions not implemented")
}
func (UnimplementedLogisticsServiceServer) GetSubscriptionSummary(context.Context, *FilterSubscriptionRequest) (*GetSubscriptionSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionSummary not implemented")
}
func (UnimplementedLogisticsServiceServer) GetInventoryData(context.Context, *FilterSubscriptionRequest) (*GetInvetoryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventoryData not implemented")
}
func (UnimplementedLogisticsServiceServer) GetInventoryCustomers(context.Context, *FilterSubscriptionRequest) (*GetInvetoryCustomersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventoryCustomers not implemented")
}
func (UnimplementedLogisticsServiceServer) CreateSlot(context.Context, *CreateSlotRequest) (*CreateSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSlot not implemented")
}
func (UnimplementedLogisticsServiceServer) UpdateSlot(context.Context, *UpdateSlotRequest) (*UpdateSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSlot not implemented")
}
func (UnimplementedLogisticsServiceServer) GetCitySlots(context.Context, *GetSlotRequest) (*GetSlotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCitySlots not implemented")
}
func (UnimplementedLogisticsServiceServer) GetSlotById(context.Context, *GetSlotRequest) (*GetSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlotById not implemented")
}
func (UnimplementedLogisticsServiceServer) DeleteSlotById(context.Context, *GetSlotRequest) (*UpdateSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSlotById not implemented")
}
func (UnimplementedLogisticsServiceServer) CreateAgent(context.Context, *CreateAgentRequest) (*CreateAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgent not implemented")
}
func (UnimplementedLogisticsServiceServer) UpdateAgent(context.Context, *UpdateAgentRequest) (*UpdateAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgent not implemented")
}
func (UnimplementedLogisticsServiceServer) UpdateAgentStatus(context.Context, *UpdateAgentRequest) (*UpdateAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentStatus not implemented")
}
func (UnimplementedLogisticsServiceServer) UpdateAgentLocation(context.Context, *UpdateAgentRequest) (*UpdateAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentLocation not implemented")
}
func (UnimplementedLogisticsServiceServer) UpdateAgentAvatar(context.Context, *UpdateAgentRequest) (*UpdateAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentAvatar not implemented")
}
func (UnimplementedLogisticsServiceServer) GetAgentsOfCity(context.Context, *GetAgentRequest) (*GetAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentsOfCity not implemented")
}
func (UnimplementedLogisticsServiceServer) FilterAgent(context.Context, *FilterAgentRequest) (*GetAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterAgent not implemented")
}
func (UnimplementedLogisticsServiceServer) GetAgentById(context.Context, *GetAgentRequest) (*GetAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentById not implemented")
}
func (UnimplementedLogisticsServiceServer) VerifyAgent(context.Context, *GetAgentRequest) (*GetAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAgent not implemented")
}
func (UnimplementedLogisticsServiceServer) InitAgentHome(context.Context, *GetAgentRequest) (*AgentHomeData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitAgentHome not implemented")
}
func (UnimplementedLogisticsServiceServer) AgentProfileData(context.Context, *GetAgentRequest) (*AgentProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentProfileData not implemented")
}
func (UnimplementedLogisticsServiceServer) CreateRoute(context.Context, *CreateRouteRequest) (*CreateRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoute not implemented")
}
func (UnimplementedLogisticsServiceServer) UpdateRoute(context.Context, *UpdateRouteRequest) (*UpdateRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoute not implemented")
}
func (UnimplementedLogisticsServiceServer) GetRoutesOfHub(context.Context, *GetRouteRequest) (*GetRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoutesOfHub not implemented")
}
func (UnimplementedLogisticsServiceServer) GetRoutesOfCity(context.Context, *GetRouteRequest) (*GetRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoutesOfCity not implemented")
}
func (UnimplementedLogisticsServiceServer) GetRouteById(context.Context, *GetRouteRequest) (*GetRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteById not implemented")
}
func (UnimplementedLogisticsServiceServer) AssignRouteAgent(context.Context, *AssignRouteAgentRequest) (*UpdateRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRouteAgent not implemented")
}
func (UnimplementedLogisticsServiceServer) AssignRouteVehicle(context.Context, *AssignRouteVehicleRequest) (*UpdateRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRouteVehicle not implemented")
}
func (UnimplementedLogisticsServiceServer) SaveRouteNode(context.Context, *SaveRouteNodeRequest) (*UpdateRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveRouteNode not implemented")
}
func (UnimplementedLogisticsServiceServer) GetRouteNodeOfRoute(context.Context, *GetRouteNodeRequest) (*GetRouteNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteNodeOfRoute not implemented")
}
func (UnimplementedLogisticsServiceServer) MakeTaskFromRoute(context.Context, *MakeTaskFromRouteRequest) (*MakeTaskFromRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeTaskFromRoute not implemented")
}
func (UnimplementedLogisticsServiceServer) UpdateRouteTask(context.Context, *UpdateRouteTaskRequest) (*UpdateRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRouteTask not implemented")
}
func (UnimplementedLogisticsServiceServer) GetRouteTask(context.Context, *GetRouteTaskRequest) (*GetRouteTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteTask not implemented")
}
func (UnimplementedLogisticsServiceServer) GetRouteTaskById(context.Context, *GetRouteTaskRequest) (*GetRouteTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteTaskById not implemented")
}
func (UnimplementedLogisticsServiceServer) GetTaskPoints(context.Context, *GetTaskPointRequest) (*GetTaskPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskPoints not implemented")
}
func (UnimplementedLogisticsServiceServer) GetTaskPointById(context.Context, *GetTaskPointRequest) (*GetTaskPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskPointById not implemented")
}
func (UnimplementedLogisticsServiceServer) CreateTaskFromPoints(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskFromPoints not implemented")
}
func (UnimplementedLogisticsServiceServer) AssignTaskAgent(context.Context, *AssignTaskAgentRequest) (*UpdateRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignTaskAgent not implemented")
}
func (UnimplementedLogisticsServiceServer) TransferTaskPoint(context.Context, *TansferTaskPointRequest) (*UpdateRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferTaskPoint not implemented")
}
func (UnimplementedLogisticsServiceServer) CreateLocation(context.Context, *CreateLocationRequest) (*CreateLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLocation not implemented")
}
func (UnimplementedLogisticsServiceServer) UpdateLocation(context.Context, *UpdateLocationRequest) (*UpdateLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocation not implemented")
}
func (UnimplementedLogisticsServiceServer) CityLocations(context.Context, *GetLocationRequest) (*GetLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CityLocations not implemented")
}
func (UnimplementedLogisticsServiceServer) GetLocationById(context.Context, *GetLocationRequest) (*GetLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocationById not implemented")
}
func (UnimplementedLogisticsServiceServer) CreateVehicle(context.Context, *CreateVehicleRequest) (*CreateVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVehicle not implemented")
}
func (UnimplementedLogisticsServiceServer) UpdateVehicle(context.Context, *UpdateVehicleRequest) (*UpdateVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVehicle not implemented")
}
func (UnimplementedLogisticsServiceServer) UpdateVehicleImage(context.Context, *UpdateVehicleRequest) (*UpdateVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVehicleImage not implemented")
}
func (UnimplementedLogisticsServiceServer) UpdateVehicleLocation(context.Context, *UpdateVehicleRequest) (*UpdateVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVehicleLocation not implemented")
}
func (UnimplementedLogisticsServiceServer) GetVehicle(context.Context, *GetVehicleRequest) (*GetVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVehicle not implemented")
}
func (UnimplementedLogisticsServiceServer) GetVehiclesOfCity(context.Context, *GetVehicleRequest) (*GetVehiclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVehiclesOfCity not implemented")
}
func (UnimplementedLogisticsServiceServer) AppHomeData(context.Context, *GetRouteTaskRequest) (*GetAppHomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppHomeData not implemented")
}
func (UnimplementedLogisticsServiceServer) GetTrackingData(context.Context, *GetTrackingDataRequest) (*GetTrackingDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrackingData not implemented")
}
func (UnimplementedLogisticsServiceServer) mustEmbedUnimplementedLogisticsServiceServer() {}

// UnsafeLogisticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogisticsServiceServer will
// result in compilation errors.
type UnsafeLogisticsServiceServer interface {
	mustEmbedUnimplementedLogisticsServiceServer()
}

func RegisterLogisticsServiceServer(s grpc.ServiceRegistrar, srv LogisticsServiceServer) {
	s.RegisterService(&LogisticsService_ServiceDesc, srv)
}

func _LogisticsService_CreateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).CreateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/CreateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).CreateSubscription(ctx, req.(*CreateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_UpdateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).UpdateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/UpdateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).UpdateSubscription(ctx, req.(*UpdateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_UpdateSubscriptionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).UpdateSubscriptionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/UpdateSubscriptionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).UpdateSubscriptionStatus(ctx, req.(*UpdateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_GetSubscriptionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).GetSubscriptionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/GetSubscriptionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).GetSubscriptionById(ctx, req.(*GetSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_GetInfoSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).GetInfoSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/GetInfoSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).GetInfoSubscriptions(ctx, req.(*FilterSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_GetSubscriptionSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).GetSubscriptionSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/GetSubscriptionSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).GetSubscriptionSummary(ctx, req.(*FilterSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_GetInventoryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).GetInventoryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/GetInventoryData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).GetInventoryData(ctx, req.(*FilterSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_GetInventoryCustomers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).GetInventoryCustomers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/GetInventoryCustomers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).GetInventoryCustomers(ctx, req.(*FilterSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_CreateSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).CreateSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/CreateSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).CreateSlot(ctx, req.(*CreateSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_UpdateSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).UpdateSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/UpdateSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).UpdateSlot(ctx, req.(*UpdateSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_GetCitySlots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).GetCitySlots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/GetCitySlots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).GetCitySlots(ctx, req.(*GetSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_GetSlotById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).GetSlotById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/GetSlotById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).GetSlotById(ctx, req.(*GetSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_DeleteSlotById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).DeleteSlotById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/DeleteSlotById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).DeleteSlotById(ctx, req.(*GetSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_CreateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).CreateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/CreateAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).CreateAgent(ctx, req.(*CreateAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_UpdateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).UpdateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/UpdateAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).UpdateAgent(ctx, req.(*UpdateAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_UpdateAgentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).UpdateAgentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/UpdateAgentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).UpdateAgentStatus(ctx, req.(*UpdateAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_UpdateAgentLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).UpdateAgentLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/UpdateAgentLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).UpdateAgentLocation(ctx, req.(*UpdateAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_UpdateAgentAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).UpdateAgentAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/UpdateAgentAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).UpdateAgentAvatar(ctx, req.(*UpdateAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_GetAgentsOfCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).GetAgentsOfCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/GetAgentsOfCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).GetAgentsOfCity(ctx, req.(*GetAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_FilterAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).FilterAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/FilterAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).FilterAgent(ctx, req.(*FilterAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_GetAgentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).GetAgentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/GetAgentById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).GetAgentById(ctx, req.(*GetAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_VerifyAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).VerifyAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/VerifyAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).VerifyAgent(ctx, req.(*GetAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_InitAgentHome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).InitAgentHome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/InitAgentHome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).InitAgentHome(ctx, req.(*GetAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_AgentProfileData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).AgentProfileData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/AgentProfileData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).AgentProfileData(ctx, req.(*GetAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_CreateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).CreateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/CreateRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).CreateRoute(ctx, req.(*CreateRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_UpdateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).UpdateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/UpdateRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).UpdateRoute(ctx, req.(*UpdateRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_GetRoutesOfHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).GetRoutesOfHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/GetRoutesOfHub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).GetRoutesOfHub(ctx, req.(*GetRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_GetRoutesOfCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).GetRoutesOfCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/GetRoutesOfCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).GetRoutesOfCity(ctx, req.(*GetRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_GetRouteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).GetRouteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/GetRouteById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).GetRouteById(ctx, req.(*GetRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_AssignRouteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRouteAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).AssignRouteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/AssignRouteAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).AssignRouteAgent(ctx, req.(*AssignRouteAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_AssignRouteVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRouteVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).AssignRouteVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/AssignRouteVehicle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).AssignRouteVehicle(ctx, req.(*AssignRouteVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_SaveRouteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRouteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).SaveRouteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/SaveRouteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).SaveRouteNode(ctx, req.(*SaveRouteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_GetRouteNodeOfRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).GetRouteNodeOfRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/GetRouteNodeOfRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).GetRouteNodeOfRoute(ctx, req.(*GetRouteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_MakeTaskFromRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeTaskFromRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).MakeTaskFromRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/MakeTaskFromRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).MakeTaskFromRoute(ctx, req.(*MakeTaskFromRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_UpdateRouteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRouteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).UpdateRouteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/UpdateRouteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).UpdateRouteTask(ctx, req.(*UpdateRouteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_GetRouteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).GetRouteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/GetRouteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).GetRouteTask(ctx, req.(*GetRouteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_GetRouteTaskById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).GetRouteTaskById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/GetRouteTaskById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).GetRouteTaskById(ctx, req.(*GetRouteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_GetTaskPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).GetTaskPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/GetTaskPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).GetTaskPoints(ctx, req.(*GetTaskPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_GetTaskPointById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).GetTaskPointById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/GetTaskPointById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).GetTaskPointById(ctx, req.(*GetTaskPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_CreateTaskFromPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).CreateTaskFromPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/CreateTaskFromPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).CreateTaskFromPoints(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_AssignTaskAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignTaskAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).AssignTaskAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/AssignTaskAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).AssignTaskAgent(ctx, req.(*AssignTaskAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_TransferTaskPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TansferTaskPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).TransferTaskPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/TransferTaskPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).TransferTaskPoint(ctx, req.(*TansferTaskPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_CreateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).CreateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/CreateLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).CreateLocation(ctx, req.(*CreateLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_UpdateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).UpdateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/UpdateLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).UpdateLocation(ctx, req.(*UpdateLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_CityLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).CityLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/CityLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).CityLocations(ctx, req.(*GetLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_GetLocationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).GetLocationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/GetLocationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).GetLocationById(ctx, req.(*GetLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_CreateVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).CreateVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/CreateVehicle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).CreateVehicle(ctx, req.(*CreateVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_UpdateVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).UpdateVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/UpdateVehicle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).UpdateVehicle(ctx, req.(*UpdateVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_UpdateVehicleImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).UpdateVehicleImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/UpdateVehicleImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).UpdateVehicleImage(ctx, req.(*UpdateVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_UpdateVehicleLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).UpdateVehicleLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/UpdateVehicleLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).UpdateVehicleLocation(ctx, req.(*UpdateVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_GetVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).GetVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/GetVehicle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).GetVehicle(ctx, req.(*GetVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_GetVehiclesOfCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).GetVehiclesOfCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/GetVehiclesOfCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).GetVehiclesOfCity(ctx, req.(*GetVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_AppHomeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).AppHomeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/AppHomeData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).AppHomeData(ctx, req.(*GetRouteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_GetTrackingData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrackingDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).GetTrackingData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.LogisticsService/GetTrackingData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).GetTrackingData(ctx, req.(*GetTrackingDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogisticsService_ServiceDesc is the grpc.ServiceDesc for LogisticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogisticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "justify.LogisticsService",
	HandlerType: (*LogisticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubscription",
			Handler:    _LogisticsService_CreateSubscription_Handler,
		},
		{
			MethodName: "UpdateSubscription",
			Handler:    _LogisticsService_UpdateSubscription_Handler,
		},
		{
			MethodName: "UpdateSubscriptionStatus",
			Handler:    _LogisticsService_UpdateSubscriptionStatus_Handler,
		},
		{
			MethodName: "GetSubscriptionById",
			Handler:    _LogisticsService_GetSubscriptionById_Handler,
		},
		{
			MethodName: "GetInfoSubscriptions",
			Handler:    _LogisticsService_GetInfoSubscriptions_Handler,
		},
		{
			MethodName: "GetSubscriptionSummary",
			Handler:    _LogisticsService_GetSubscriptionSummary_Handler,
		},
		{
			MethodName: "GetInventoryData",
			Handler:    _LogisticsService_GetInventoryData_Handler,
		},
		{
			MethodName: "GetInventoryCustomers",
			Handler:    _LogisticsService_GetInventoryCustomers_Handler,
		},
		{
			MethodName: "CreateSlot",
			Handler:    _LogisticsService_CreateSlot_Handler,
		},
		{
			MethodName: "UpdateSlot",
			Handler:    _LogisticsService_UpdateSlot_Handler,
		},
		{
			MethodName: "GetCitySlots",
			Handler:    _LogisticsService_GetCitySlots_Handler,
		},
		{
			MethodName: "GetSlotById",
			Handler:    _LogisticsService_GetSlotById_Handler,
		},
		{
			MethodName: "DeleteSlotById",
			Handler:    _LogisticsService_DeleteSlotById_Handler,
		},
		{
			MethodName: "CreateAgent",
			Handler:    _LogisticsService_CreateAgent_Handler,
		},
		{
			MethodName: "UpdateAgent",
			Handler:    _LogisticsService_UpdateAgent_Handler,
		},
		{
			MethodName: "UpdateAgentStatus",
			Handler:    _LogisticsService_UpdateAgentStatus_Handler,
		},
		{
			MethodName: "UpdateAgentLocation",
			Handler:    _LogisticsService_UpdateAgentLocation_Handler,
		},
		{
			MethodName: "UpdateAgentAvatar",
			Handler:    _LogisticsService_UpdateAgentAvatar_Handler,
		},
		{
			MethodName: "GetAgentsOfCity",
			Handler:    _LogisticsService_GetAgentsOfCity_Handler,
		},
		{
			MethodName: "FilterAgent",
			Handler:    _LogisticsService_FilterAgent_Handler,
		},
		{
			MethodName: "GetAgentById",
			Handler:    _LogisticsService_GetAgentById_Handler,
		},
		{
			MethodName: "VerifyAgent",
			Handler:    _LogisticsService_VerifyAgent_Handler,
		},
		{
			MethodName: "InitAgentHome",
			Handler:    _LogisticsService_InitAgentHome_Handler,
		},
		{
			MethodName: "AgentProfileData",
			Handler:    _LogisticsService_AgentProfileData_Handler,
		},
		{
			MethodName: "CreateRoute",
			Handler:    _LogisticsService_CreateRoute_Handler,
		},
		{
			MethodName: "UpdateRoute",
			Handler:    _LogisticsService_UpdateRoute_Handler,
		},
		{
			MethodName: "GetRoutesOfHub",
			Handler:    _LogisticsService_GetRoutesOfHub_Handler,
		},
		{
			MethodName: "GetRoutesOfCity",
			Handler:    _LogisticsService_GetRoutesOfCity_Handler,
		},
		{
			MethodName: "GetRouteById",
			Handler:    _LogisticsService_GetRouteById_Handler,
		},
		{
			MethodName: "AssignRouteAgent",
			Handler:    _LogisticsService_AssignRouteAgent_Handler,
		},
		{
			MethodName: "AssignRouteVehicle",
			Handler:    _LogisticsService_AssignRouteVehicle_Handler,
		},
		{
			MethodName: "SaveRouteNode",
			Handler:    _LogisticsService_SaveRouteNode_Handler,
		},
		{
			MethodName: "GetRouteNodeOfRoute",
			Handler:    _LogisticsService_GetRouteNodeOfRoute_Handler,
		},
		{
			MethodName: "MakeTaskFromRoute",
			Handler:    _LogisticsService_MakeTaskFromRoute_Handler,
		},
		{
			MethodName: "UpdateRouteTask",
			Handler:    _LogisticsService_UpdateRouteTask_Handler,
		},
		{
			MethodName: "GetRouteTask",
			Handler:    _LogisticsService_GetRouteTask_Handler,
		},
		{
			MethodName: "GetRouteTaskById",
			Handler:    _LogisticsService_GetRouteTaskById_Handler,
		},
		{
			MethodName: "GetTaskPoints",
			Handler:    _LogisticsService_GetTaskPoints_Handler,
		},
		{
			MethodName: "GetTaskPointById",
			Handler:    _LogisticsService_GetTaskPointById_Handler,
		},
		{
			MethodName: "CreateTaskFromPoints",
			Handler:    _LogisticsService_CreateTaskFromPoints_Handler,
		},
		{
			MethodName: "AssignTaskAgent",
			Handler:    _LogisticsService_AssignTaskAgent_Handler,
		},
		{
			MethodName: "TransferTaskPoint",
			Handler:    _LogisticsService_TransferTaskPoint_Handler,
		},
		{
			MethodName: "CreateLocation",
			Handler:    _LogisticsService_CreateLocation_Handler,
		},
		{
			MethodName: "UpdateLocation",
			Handler:    _LogisticsService_UpdateLocation_Handler,
		},
		{
			MethodName: "CityLocations",
			Handler:    _LogisticsService_CityLocations_Handler,
		},
		{
			MethodName: "GetLocationById",
			Handler:    _LogisticsService_GetLocationById_Handler,
		},
		{
			MethodName: "CreateVehicle",
			Handler:    _LogisticsService_CreateVehicle_Handler,
		},
		{
			MethodName: "UpdateVehicle",
			Handler:    _LogisticsService_UpdateVehicle_Handler,
		},
		{
			MethodName: "UpdateVehicleImage",
			Handler:    _LogisticsService_UpdateVehicleImage_Handler,
		},
		{
			MethodName: "UpdateVehicleLocation",
			Handler:    _LogisticsService_UpdateVehicleLocation_Handler,
		},
		{
			MethodName: "GetVehicle",
			Handler:    _LogisticsService_GetVehicle_Handler,
		},
		{
			MethodName: "GetVehiclesOfCity",
			Handler:    _LogisticsService_GetVehiclesOfCity_Handler,
		},
		{
			MethodName: "AppHomeData",
			Handler:    _LogisticsService_AppHomeData_Handler,
		},
		{
			MethodName: "GetTrackingData",
			Handler:    _LogisticsService_GetTrackingData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logistics.proto",
}
