// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: hub.proto

package justify

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HubServiceClient is the client API for HubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HubServiceClient interface {
	//Hub Methods
	CreateHub(ctx context.Context, in *CreateHubRequest, opts ...grpc.CallOption) (*CreateHubResponse, error)
	UpdateHub(ctx context.Context, in *UpdateHubRequest, opts ...grpc.CallOption) (*UpdateHubResponse, error)
	UpdateHubLocation(ctx context.Context, in *UpdateHubLocationRequest, opts ...grpc.CallOption) (*UpdateHubResponse, error)
	UpdateHubStatus(ctx context.Context, in *UpdateHubStatusRequest, opts ...grpc.CallOption) (*UpdateHubResponse, error)
	GetHubsOfCity(ctx context.Context, in *GetHubRequest, opts ...grpc.CallOption) (*GetHubsResponse, error)
	GetHubsOfUser(ctx context.Context, in *GetHubRequest, opts ...grpc.CallOption) (*GetHubsResponse, error)
	GetHubById(ctx context.Context, in *GetHubRequest, opts ...grpc.CallOption) (*GetHubResponse, error)
	//Category Methods
	CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error)
	UpdateCategoryStatus(ctx context.Context, in *UpdateCategoryStatusRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error)
	GetHubCategories(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoriesResponse, error)
	UpdateCategoryImage(ctx context.Context, in *UpdateCategoryImageRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error)
	GetCategoryById(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryResponse, error)
	//SubCategory Methods
	CreateSubCategory(ctx context.Context, in *CreateSubCategoryRequest, opts ...grpc.CallOption) (*CreateSubCategoryResponse, error)
	UpdateSubCategory(ctx context.Context, in *UpdateSubCategoryRequest, opts ...grpc.CallOption) (*UpdateSubCategoryResponse, error)
	UpdateSubCategoryStatus(ctx context.Context, in *UpdateSubCategoryStatusRequest, opts ...grpc.CallOption) (*UpdateSubCategoryResponse, error)
	GetSubCategoriesOfCategory(ctx context.Context, in *GetSubCategoryRequest, opts ...grpc.CallOption) (*GetSubCategoriesResponse, error)
	UpdateSubCategoryImage(ctx context.Context, in *UpdateSubCategoryImageRequest, opts ...grpc.CallOption) (*UpdateSubCategoryResponse, error)
	GetSubCategoryById(ctx context.Context, in *GetSubCategoryRequest, opts ...grpc.CallOption) (*GetSubCategoryResponse, error)
	//Product Methods
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error)
	UpdateProductStatus(ctx context.Context, in *UpdateProductStatusRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error)
	UpdateProductQty(ctx context.Context, in *UpdateProductQtyRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error)
	UpdateProductImage(ctx context.Context, in *UpdateProductImageRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error)
	GetProductsOfCategory(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductsResponse, error)
	GetProductsOfSubCategory(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductsResponse, error)
	NormalSearchProducts(ctx context.Context, in *ProductSearchRequest, opts ...grpc.CallOption) (*NormalProductSearchResponse, error)
	GetProductById(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error)
	//Combined Methods
	SearchProducts(ctx context.Context, in *ProductSearchRequest, opts ...grpc.CallOption) (*ProductSearchResponse, error)
	HubInitData(ctx context.Context, in *HubInitRequest, opts ...grpc.CallOption) (*HubInitResponse, error)
}

type hubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHubServiceClient(cc grpc.ClientConnInterface) HubServiceClient {
	return &hubServiceClient{cc}
}

func (c *hubServiceClient) CreateHub(ctx context.Context, in *CreateHubRequest, opts ...grpc.CallOption) (*CreateHubResponse, error) {
	out := new(CreateHubResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/CreateHub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) UpdateHub(ctx context.Context, in *UpdateHubRequest, opts ...grpc.CallOption) (*UpdateHubResponse, error) {
	out := new(UpdateHubResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/UpdateHub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) UpdateHubLocation(ctx context.Context, in *UpdateHubLocationRequest, opts ...grpc.CallOption) (*UpdateHubResponse, error) {
	out := new(UpdateHubResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/UpdateHubLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) UpdateHubStatus(ctx context.Context, in *UpdateHubStatusRequest, opts ...grpc.CallOption) (*UpdateHubResponse, error) {
	out := new(UpdateHubResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/UpdateHubStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetHubsOfCity(ctx context.Context, in *GetHubRequest, opts ...grpc.CallOption) (*GetHubsResponse, error) {
	out := new(GetHubsResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/GetHubsOfCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetHubsOfUser(ctx context.Context, in *GetHubRequest, opts ...grpc.CallOption) (*GetHubsResponse, error) {
	out := new(GetHubsResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/GetHubsOfUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetHubById(ctx context.Context, in *GetHubRequest, opts ...grpc.CallOption) (*GetHubResponse, error) {
	out := new(GetHubResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/GetHubById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error) {
	out := new(CreateCategoryResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/CreateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error) {
	out := new(UpdateCategoryResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/UpdateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) UpdateCategoryStatus(ctx context.Context, in *UpdateCategoryStatusRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error) {
	out := new(UpdateCategoryResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/UpdateCategoryStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetHubCategories(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoriesResponse, error) {
	out := new(GetCategoriesResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/GetHubCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) UpdateCategoryImage(ctx context.Context, in *UpdateCategoryImageRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error) {
	out := new(UpdateCategoryResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/UpdateCategoryImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetCategoryById(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryResponse, error) {
	out := new(GetCategoryResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/GetCategoryById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) CreateSubCategory(ctx context.Context, in *CreateSubCategoryRequest, opts ...grpc.CallOption) (*CreateSubCategoryResponse, error) {
	out := new(CreateSubCategoryResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/CreateSubCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) UpdateSubCategory(ctx context.Context, in *UpdateSubCategoryRequest, opts ...grpc.CallOption) (*UpdateSubCategoryResponse, error) {
	out := new(UpdateSubCategoryResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/UpdateSubCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) UpdateSubCategoryStatus(ctx context.Context, in *UpdateSubCategoryStatusRequest, opts ...grpc.CallOption) (*UpdateSubCategoryResponse, error) {
	out := new(UpdateSubCategoryResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/UpdateSubCategoryStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetSubCategoriesOfCategory(ctx context.Context, in *GetSubCategoryRequest, opts ...grpc.CallOption) (*GetSubCategoriesResponse, error) {
	out := new(GetSubCategoriesResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/GetSubCategoriesOfCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) UpdateSubCategoryImage(ctx context.Context, in *UpdateSubCategoryImageRequest, opts ...grpc.CallOption) (*UpdateSubCategoryResponse, error) {
	out := new(UpdateSubCategoryResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/UpdateSubCategoryImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetSubCategoryById(ctx context.Context, in *GetSubCategoryRequest, opts ...grpc.CallOption) (*GetSubCategoryResponse, error) {
	out := new(GetSubCategoryResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/GetSubCategoryById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	out := new(CreateProductResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error) {
	out := new(UpdateProductResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) UpdateProductStatus(ctx context.Context, in *UpdateProductStatusRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error) {
	out := new(UpdateProductResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/UpdateProductStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) UpdateProductQty(ctx context.Context, in *UpdateProductQtyRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error) {
	out := new(UpdateProductResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/UpdateProductQty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) UpdateProductImage(ctx context.Context, in *UpdateProductImageRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error) {
	out := new(UpdateProductResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/UpdateProductImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetProductsOfCategory(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductsResponse, error) {
	out := new(GetProductsResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/GetProductsOfCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetProductsOfSubCategory(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductsResponse, error) {
	out := new(GetProductsResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/GetProductsOfSubCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) NormalSearchProducts(ctx context.Context, in *ProductSearchRequest, opts ...grpc.CallOption) (*NormalProductSearchResponse, error) {
	out := new(NormalProductSearchResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/NormalSearchProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetProductById(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error) {
	out := new(GetProductResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/GetProductById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) SearchProducts(ctx context.Context, in *ProductSearchRequest, opts ...grpc.CallOption) (*ProductSearchResponse, error) {
	out := new(ProductSearchResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/SearchProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) HubInitData(ctx context.Context, in *HubInitRequest, opts ...grpc.CallOption) (*HubInitResponse, error) {
	out := new(HubInitResponse)
	err := c.cc.Invoke(ctx, "/justify.HubService/HubInitData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HubServiceServer is the server API for HubService service.
// All implementations must embed UnimplementedHubServiceServer
// for forward compatibility
type HubServiceServer interface {
	//Hub Methods
	CreateHub(context.Context, *CreateHubRequest) (*CreateHubResponse, error)
	UpdateHub(context.Context, *UpdateHubRequest) (*UpdateHubResponse, error)
	UpdateHubLocation(context.Context, *UpdateHubLocationRequest) (*UpdateHubResponse, error)
	UpdateHubStatus(context.Context, *UpdateHubStatusRequest) (*UpdateHubResponse, error)
	GetHubsOfCity(context.Context, *GetHubRequest) (*GetHubsResponse, error)
	GetHubsOfUser(context.Context, *GetHubRequest) (*GetHubsResponse, error)
	GetHubById(context.Context, *GetHubRequest) (*GetHubResponse, error)
	//Category Methods
	CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error)
	UpdateCategory(context.Context, *UpdateCategoryRequest) (*UpdateCategoryResponse, error)
	UpdateCategoryStatus(context.Context, *UpdateCategoryStatusRequest) (*UpdateCategoryResponse, error)
	GetHubCategories(context.Context, *GetCategoryRequest) (*GetCategoriesResponse, error)
	UpdateCategoryImage(context.Context, *UpdateCategoryImageRequest) (*UpdateCategoryResponse, error)
	GetCategoryById(context.Context, *GetCategoryRequest) (*GetCategoryResponse, error)
	//SubCategory Methods
	CreateSubCategory(context.Context, *CreateSubCategoryRequest) (*CreateSubCategoryResponse, error)
	UpdateSubCategory(context.Context, *UpdateSubCategoryRequest) (*UpdateSubCategoryResponse, error)
	UpdateSubCategoryStatus(context.Context, *UpdateSubCategoryStatusRequest) (*UpdateSubCategoryResponse, error)
	GetSubCategoriesOfCategory(context.Context, *GetSubCategoryRequest) (*GetSubCategoriesResponse, error)
	UpdateSubCategoryImage(context.Context, *UpdateSubCategoryImageRequest) (*UpdateSubCategoryResponse, error)
	GetSubCategoryById(context.Context, *GetSubCategoryRequest) (*GetSubCategoryResponse, error)
	//Product Methods
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error)
	UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error)
	UpdateProductStatus(context.Context, *UpdateProductStatusRequest) (*UpdateProductResponse, error)
	UpdateProductQty(context.Context, *UpdateProductQtyRequest) (*UpdateProductResponse, error)
	UpdateProductImage(context.Context, *UpdateProductImageRequest) (*UpdateProductResponse, error)
	GetProductsOfCategory(context.Context, *GetProductRequest) (*GetProductsResponse, error)
	GetProductsOfSubCategory(context.Context, *GetProductRequest) (*GetProductsResponse, error)
	NormalSearchProducts(context.Context, *ProductSearchRequest) (*NormalProductSearchResponse, error)
	GetProductById(context.Context, *GetProductRequest) (*GetProductResponse, error)
	//Combined Methods
	SearchProducts(context.Context, *ProductSearchRequest) (*ProductSearchResponse, error)
	HubInitData(context.Context, *HubInitRequest) (*HubInitResponse, error)
	mustEmbedUnimplementedHubServiceServer()
}

// UnimplementedHubServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHubServiceServer struct {
}

func (UnimplementedHubServiceServer) CreateHub(context.Context, *CreateHubRequest) (*CreateHubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHub not implemented")
}
func (UnimplementedHubServiceServer) UpdateHub(context.Context, *UpdateHubRequest) (*UpdateHubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHub not implemented")
}
func (UnimplementedHubServiceServer) UpdateHubLocation(context.Context, *UpdateHubLocationRequest) (*UpdateHubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHubLocation not implemented")
}
func (UnimplementedHubServiceServer) UpdateHubStatus(context.Context, *UpdateHubStatusRequest) (*UpdateHubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHubStatus not implemented")
}
func (UnimplementedHubServiceServer) GetHubsOfCity(context.Context, *GetHubRequest) (*GetHubsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHubsOfCity not implemented")
}
func (UnimplementedHubServiceServer) GetHubsOfUser(context.Context, *GetHubRequest) (*GetHubsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHubsOfUser not implemented")
}
func (UnimplementedHubServiceServer) GetHubById(context.Context, *GetHubRequest) (*GetHubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHubById not implemented")
}
func (UnimplementedHubServiceServer) CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedHubServiceServer) UpdateCategory(context.Context, *UpdateCategoryRequest) (*UpdateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedHubServiceServer) UpdateCategoryStatus(context.Context, *UpdateCategoryStatusRequest) (*UpdateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategoryStatus not implemented")
}
func (UnimplementedHubServiceServer) GetHubCategories(context.Context, *GetCategoryRequest) (*GetCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHubCategories not implemented")
}
func (UnimplementedHubServiceServer) UpdateCategoryImage(context.Context, *UpdateCategoryImageRequest) (*UpdateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategoryImage not implemented")
}
func (UnimplementedHubServiceServer) GetCategoryById(context.Context, *GetCategoryRequest) (*GetCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryById not implemented")
}
func (UnimplementedHubServiceServer) CreateSubCategory(context.Context, *CreateSubCategoryRequest) (*CreateSubCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubCategory not implemented")
}
func (UnimplementedHubServiceServer) UpdateSubCategory(context.Context, *UpdateSubCategoryRequest) (*UpdateSubCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubCategory not implemented")
}
func (UnimplementedHubServiceServer) UpdateSubCategoryStatus(context.Context, *UpdateSubCategoryStatusRequest) (*UpdateSubCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubCategoryStatus not implemented")
}
func (UnimplementedHubServiceServer) GetSubCategoriesOfCategory(context.Context, *GetSubCategoryRequest) (*GetSubCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubCategoriesOfCategory not implemented")
}
func (UnimplementedHubServiceServer) UpdateSubCategoryImage(context.Context, *UpdateSubCategoryImageRequest) (*UpdateSubCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubCategoryImage not implemented")
}
func (UnimplementedHubServiceServer) GetSubCategoryById(context.Context, *GetSubCategoryRequest) (*GetSubCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubCategoryById not implemented")
}
func (UnimplementedHubServiceServer) CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedHubServiceServer) UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedHubServiceServer) UpdateProductStatus(context.Context, *UpdateProductStatusRequest) (*UpdateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductStatus not implemented")
}
func (UnimplementedHubServiceServer) UpdateProductQty(context.Context, *UpdateProductQtyRequest) (*UpdateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductQty not implemented")
}
func (UnimplementedHubServiceServer) UpdateProductImage(context.Context, *UpdateProductImageRequest) (*UpdateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductImage not implemented")
}
func (UnimplementedHubServiceServer) GetProductsOfCategory(context.Context, *GetProductRequest) (*GetProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsOfCategory not implemented")
}
func (UnimplementedHubServiceServer) GetProductsOfSubCategory(context.Context, *GetProductRequest) (*GetProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsOfSubCategory not implemented")
}
func (UnimplementedHubServiceServer) NormalSearchProducts(context.Context, *ProductSearchRequest) (*NormalProductSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NormalSearchProducts not implemented")
}
func (UnimplementedHubServiceServer) GetProductById(context.Context, *GetProductRequest) (*GetProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductById not implemented")
}
func (UnimplementedHubServiceServer) SearchProducts(context.Context, *ProductSearchRequest) (*ProductSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProducts not implemented")
}
func (UnimplementedHubServiceServer) HubInitData(context.Context, *HubInitRequest) (*HubInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HubInitData not implemented")
}
func (UnimplementedHubServiceServer) mustEmbedUnimplementedHubServiceServer() {}

// UnsafeHubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HubServiceServer will
// result in compilation errors.
type UnsafeHubServiceServer interface {
	mustEmbedUnimplementedHubServiceServer()
}

func RegisterHubServiceServer(s grpc.ServiceRegistrar, srv HubServiceServer) {
	s.RegisterService(&HubService_ServiceDesc, srv)
}

func _HubService_CreateHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).CreateHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/CreateHub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).CreateHub(ctx, req.(*CreateHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_UpdateHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).UpdateHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/UpdateHub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).UpdateHub(ctx, req.(*UpdateHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_UpdateHubLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHubLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).UpdateHubLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/UpdateHubLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).UpdateHubLocation(ctx, req.(*UpdateHubLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_UpdateHubStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHubStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).UpdateHubStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/UpdateHubStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).UpdateHubStatus(ctx, req.(*UpdateHubStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetHubsOfCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetHubsOfCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/GetHubsOfCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetHubsOfCity(ctx, req.(*GetHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetHubsOfUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetHubsOfUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/GetHubsOfUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetHubsOfUser(ctx, req.(*GetHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetHubById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetHubById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/GetHubById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetHubById(ctx, req.(*GetHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/CreateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).CreateCategory(ctx, req.(*CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/UpdateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).UpdateCategory(ctx, req.(*UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_UpdateCategoryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).UpdateCategoryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/UpdateCategoryStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).UpdateCategoryStatus(ctx, req.(*UpdateCategoryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetHubCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetHubCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/GetHubCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetHubCategories(ctx, req.(*GetCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_UpdateCategoryImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).UpdateCategoryImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/UpdateCategoryImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).UpdateCategoryImage(ctx, req.(*UpdateCategoryImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetCategoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetCategoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/GetCategoryById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetCategoryById(ctx, req.(*GetCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_CreateSubCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).CreateSubCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/CreateSubCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).CreateSubCategory(ctx, req.(*CreateSubCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_UpdateSubCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).UpdateSubCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/UpdateSubCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).UpdateSubCategory(ctx, req.(*UpdateSubCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_UpdateSubCategoryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubCategoryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).UpdateSubCategoryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/UpdateSubCategoryStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).UpdateSubCategoryStatus(ctx, req.(*UpdateSubCategoryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetSubCategoriesOfCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetSubCategoriesOfCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/GetSubCategoriesOfCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetSubCategoriesOfCategory(ctx, req.(*GetSubCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_UpdateSubCategoryImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubCategoryImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).UpdateSubCategoryImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/UpdateSubCategoryImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).UpdateSubCategoryImage(ctx, req.(*UpdateSubCategoryImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetSubCategoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetSubCategoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/GetSubCategoryById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetSubCategoryById(ctx, req.(*GetSubCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).UpdateProduct(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_UpdateProductStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).UpdateProductStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/UpdateProductStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).UpdateProductStatus(ctx, req.(*UpdateProductStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_UpdateProductQty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductQtyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).UpdateProductQty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/UpdateProductQty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).UpdateProductQty(ctx, req.(*UpdateProductQtyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_UpdateProductImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).UpdateProductImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/UpdateProductImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).UpdateProductImage(ctx, req.(*UpdateProductImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetProductsOfCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetProductsOfCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/GetProductsOfCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetProductsOfCategory(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetProductsOfSubCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetProductsOfSubCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/GetProductsOfSubCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetProductsOfSubCategory(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_NormalSearchProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).NormalSearchProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/NormalSearchProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).NormalSearchProducts(ctx, req.(*ProductSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetProductById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetProductById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/GetProductById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetProductById(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_SearchProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).SearchProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/SearchProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).SearchProducts(ctx, req.(*ProductSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_HubInitData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HubInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).HubInitData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.HubService/HubInitData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).HubInitData(ctx, req.(*HubInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HubService_ServiceDesc is the grpc.ServiceDesc for HubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "justify.HubService",
	HandlerType: (*HubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHub",
			Handler:    _HubService_CreateHub_Handler,
		},
		{
			MethodName: "UpdateHub",
			Handler:    _HubService_UpdateHub_Handler,
		},
		{
			MethodName: "UpdateHubLocation",
			Handler:    _HubService_UpdateHubLocation_Handler,
		},
		{
			MethodName: "UpdateHubStatus",
			Handler:    _HubService_UpdateHubStatus_Handler,
		},
		{
			MethodName: "GetHubsOfCity",
			Handler:    _HubService_GetHubsOfCity_Handler,
		},
		{
			MethodName: "GetHubsOfUser",
			Handler:    _HubService_GetHubsOfUser_Handler,
		},
		{
			MethodName: "GetHubById",
			Handler:    _HubService_GetHubById_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _HubService_CreateCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _HubService_UpdateCategory_Handler,
		},
		{
			MethodName: "UpdateCategoryStatus",
			Handler:    _HubService_UpdateCategoryStatus_Handler,
		},
		{
			MethodName: "GetHubCategories",
			Handler:    _HubService_GetHubCategories_Handler,
		},
		{
			MethodName: "UpdateCategoryImage",
			Handler:    _HubService_UpdateCategoryImage_Handler,
		},
		{
			MethodName: "GetCategoryById",
			Handler:    _HubService_GetCategoryById_Handler,
		},
		{
			MethodName: "CreateSubCategory",
			Handler:    _HubService_CreateSubCategory_Handler,
		},
		{
			MethodName: "UpdateSubCategory",
			Handler:    _HubService_UpdateSubCategory_Handler,
		},
		{
			MethodName: "UpdateSubCategoryStatus",
			Handler:    _HubService_UpdateSubCategoryStatus_Handler,
		},
		{
			MethodName: "GetSubCategoriesOfCategory",
			Handler:    _HubService_GetSubCategoriesOfCategory_Handler,
		},
		{
			MethodName: "UpdateSubCategoryImage",
			Handler:    _HubService_UpdateSubCategoryImage_Handler,
		},
		{
			MethodName: "GetSubCategoryById",
			Handler:    _HubService_GetSubCategoryById_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _HubService_CreateProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _HubService_UpdateProduct_Handler,
		},
		{
			MethodName: "UpdateProductStatus",
			Handler:    _HubService_UpdateProductStatus_Handler,
		},
		{
			MethodName: "UpdateProductQty",
			Handler:    _HubService_UpdateProductQty_Handler,
		},
		{
			MethodName: "UpdateProductImage",
			Handler:    _HubService_UpdateProductImage_Handler,
		},
		{
			MethodName: "GetProductsOfCategory",
			Handler:    _HubService_GetProductsOfCategory_Handler,
		},
		{
			MethodName: "GetProductsOfSubCategory",
			Handler:    _HubService_GetProductsOfSubCategory_Handler,
		},
		{
			MethodName: "NormalSearchProducts",
			Handler:    _HubService_NormalSearchProducts_Handler,
		},
		{
			MethodName: "GetProductById",
			Handler:    _HubService_GetProductById_Handler,
		},
		{
			MethodName: "SearchProducts",
			Handler:    _HubService_SearchProducts_Handler,
		},
		{
			MethodName: "HubInitData",
			Handler:    _HubService_HubInitData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hub.proto",
}
