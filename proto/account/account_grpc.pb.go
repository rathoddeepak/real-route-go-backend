// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: account.proto

package justify

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	//Customer App Requests
	CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...grpc.CallOption) (*CreateCompanyResponse, error)
	LoginCompany(ctx context.Context, in *LoginCompanyRequest, opts ...grpc.CallOption) (*LoginCompanyResponse, error)
	VerifyCompanyOTP(ctx context.Context, in *VerifyCompanyOTPRequest, opts ...grpc.CallOption) (*VerifyCompanyOTPResponse, error)
	UpdateCompany(ctx context.Context, in *UpdateCompanyRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	CompanyPasswordReset(ctx context.Context, in *CompanyPasswordResetRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...grpc.CallOption) (*GetCompanyResponse, error)
	GetCompanies(ctx context.Context, in *GetCompanyRequest, opts ...grpc.CallOption) (*GetCompaniesResponse, error)
	UpdateCompanySetting(ctx context.Context, in *UpdateCompanySettingRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	GetRazorpayPlans(ctx context.Context, in *GetRazorPayPlansRequest, opts ...grpc.CallOption) (*GetRazorPayPlansResponse, error)
	CreateCompanyBilling(ctx context.Context, in *CreateCompanyBillingRequest, opts ...grpc.CallOption) (*CreateCompanyBillingResponse, error)
	ValidateCompanyBilling(ctx context.Context, in *ValidateCompanyBillingRequest, opts ...grpc.CallOption) (*ValidateCompanyBillingResponse, error)
	MarkCompanyBillingStatus(ctx context.Context, in *MarkCompanyBillingStatusRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	//Company Request End
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	VerifyOTP(ctx context.Context, in *VerifyOTPRequest, opts ...grpc.CallOption) (*VerifyOTPResponse, error)
	SearchUsers(ctx context.Context, in *SearchUserRequest, opts ...grpc.CallOption) (*GetUsersReponse, error)
	GetUserById(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReponse, error)
	//Admin
	AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...grpc.CallOption) (*AdminLoginResponse, error)
	AdminVerify(ctx context.Context, in *AdminVerifyRequest, opts ...grpc.CallOption) (*AdminVerifyResponse, error)
	AdminCreateUser(ctx context.Context, in *AdminCreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	AdminUpdateUser(ctx context.Context, in *AdminUpdateUserRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	//Wallet
	CreditWallet(ctx context.Context, in *WalletTxnRequest, opts ...grpc.CallOption) (*TxnResponse, error)
	DebitWallet(ctx context.Context, in *WalletTxnRequest, opts ...grpc.CallOption) (*TxnResponse, error)
	GetTxns(ctx context.Context, in *GetTxnRequest, opts ...grpc.CallOption) (*GetTxnsResponse, error)
	GetTxnById(ctx context.Context, in *GetTxnRequest, opts ...grpc.CallOption) (*GetTxnResponse, error)
	//Address Methods
	CreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...grpc.CallOption) (*CreateAddressResponse, error)
	UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*UpdateAddressResponse, error)
	UpdateAddressLocation(ctx context.Context, in *UpdateAddressLocationRequest, opts ...grpc.CallOption) (*UpdateAddressResponse, error)
	UpdateAddressStatus(ctx context.Context, in *UpdateAddressStatusRequest, opts ...grpc.CallOption) (*UpdateAddressResponse, error)
	GetAddressesOfUser(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*GetAddressesResponse, error)
	GetAddressById(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*GetAddressResponse, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...grpc.CallOption) (*CreateCompanyResponse, error) {
	out := new(CreateCompanyResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/CreateCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) LoginCompany(ctx context.Context, in *LoginCompanyRequest, opts ...grpc.CallOption) (*LoginCompanyResponse, error) {
	out := new(LoginCompanyResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/LoginCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) VerifyCompanyOTP(ctx context.Context, in *VerifyCompanyOTPRequest, opts ...grpc.CallOption) (*VerifyCompanyOTPResponse, error) {
	out := new(VerifyCompanyOTPResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/VerifyCompanyOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateCompany(ctx context.Context, in *UpdateCompanyRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/UpdateCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CompanyPasswordReset(ctx context.Context, in *CompanyPasswordResetRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/CompanyPasswordReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...grpc.CallOption) (*GetCompanyResponse, error) {
	out := new(GetCompanyResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/GetCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetCompanies(ctx context.Context, in *GetCompanyRequest, opts ...grpc.CallOption) (*GetCompaniesResponse, error) {
	out := new(GetCompaniesResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/GetCompanies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateCompanySetting(ctx context.Context, in *UpdateCompanySettingRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/UpdateCompanySetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetRazorpayPlans(ctx context.Context, in *GetRazorPayPlansRequest, opts ...grpc.CallOption) (*GetRazorPayPlansResponse, error) {
	out := new(GetRazorPayPlansResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/GetRazorpayPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CreateCompanyBilling(ctx context.Context, in *CreateCompanyBillingRequest, opts ...grpc.CallOption) (*CreateCompanyBillingResponse, error) {
	out := new(CreateCompanyBillingResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/CreateCompanyBilling", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) ValidateCompanyBilling(ctx context.Context, in *ValidateCompanyBillingRequest, opts ...grpc.CallOption) (*ValidateCompanyBillingResponse, error) {
	out := new(ValidateCompanyBillingResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/ValidateCompanyBilling", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) MarkCompanyBillingStatus(ctx context.Context, in *MarkCompanyBillingStatusRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/MarkCompanyBillingStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) VerifyOTP(ctx context.Context, in *VerifyOTPRequest, opts ...grpc.CallOption) (*VerifyOTPResponse, error) {
	out := new(VerifyOTPResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/VerifyOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) SearchUsers(ctx context.Context, in *SearchUserRequest, opts ...grpc.CallOption) (*GetUsersReponse, error) {
	out := new(GetUsersReponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/SearchUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetUserById(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReponse, error) {
	out := new(GetUserReponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/GetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...grpc.CallOption) (*AdminLoginResponse, error) {
	out := new(AdminLoginResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/AdminLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) AdminVerify(ctx context.Context, in *AdminVerifyRequest, opts ...grpc.CallOption) (*AdminVerifyResponse, error) {
	out := new(AdminVerifyResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/AdminVerify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) AdminCreateUser(ctx context.Context, in *AdminCreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/AdminCreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) AdminUpdateUser(ctx context.Context, in *AdminUpdateUserRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/AdminUpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CreditWallet(ctx context.Context, in *WalletTxnRequest, opts ...grpc.CallOption) (*TxnResponse, error) {
	out := new(TxnResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/CreditWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) DebitWallet(ctx context.Context, in *WalletTxnRequest, opts ...grpc.CallOption) (*TxnResponse, error) {
	out := new(TxnResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/DebitWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetTxns(ctx context.Context, in *GetTxnRequest, opts ...grpc.CallOption) (*GetTxnsResponse, error) {
	out := new(GetTxnsResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/GetTxns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetTxnById(ctx context.Context, in *GetTxnRequest, opts ...grpc.CallOption) (*GetTxnResponse, error) {
	out := new(GetTxnResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/GetTxnById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...grpc.CallOption) (*CreateAddressResponse, error) {
	out := new(CreateAddressResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/CreateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*UpdateAddressResponse, error) {
	out := new(UpdateAddressResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/UpdateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateAddressLocation(ctx context.Context, in *UpdateAddressLocationRequest, opts ...grpc.CallOption) (*UpdateAddressResponse, error) {
	out := new(UpdateAddressResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/UpdateAddressLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateAddressStatus(ctx context.Context, in *UpdateAddressStatusRequest, opts ...grpc.CallOption) (*UpdateAddressResponse, error) {
	out := new(UpdateAddressResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/UpdateAddressStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAddressesOfUser(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*GetAddressesResponse, error) {
	out := new(GetAddressesResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/GetAddressesOfUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAddressById(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*GetAddressResponse, error) {
	out := new(GetAddressResponse)
	err := c.cc.Invoke(ctx, "/justify.AccountService/GetAddressById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	//Customer App Requests
	CreateCompany(context.Context, *CreateCompanyRequest) (*CreateCompanyResponse, error)
	LoginCompany(context.Context, *LoginCompanyRequest) (*LoginCompanyResponse, error)
	VerifyCompanyOTP(context.Context, *VerifyCompanyOTPRequest) (*VerifyCompanyOTPResponse, error)
	UpdateCompany(context.Context, *UpdateCompanyRequest) (*CommonResponse, error)
	CompanyPasswordReset(context.Context, *CompanyPasswordResetRequest) (*CommonResponse, error)
	GetCompany(context.Context, *GetCompanyRequest) (*GetCompanyResponse, error)
	GetCompanies(context.Context, *GetCompanyRequest) (*GetCompaniesResponse, error)
	UpdateCompanySetting(context.Context, *UpdateCompanySettingRequest) (*CommonResponse, error)
	GetRazorpayPlans(context.Context, *GetRazorPayPlansRequest) (*GetRazorPayPlansResponse, error)
	CreateCompanyBilling(context.Context, *CreateCompanyBillingRequest) (*CreateCompanyBillingResponse, error)
	ValidateCompanyBilling(context.Context, *ValidateCompanyBillingRequest) (*ValidateCompanyBillingResponse, error)
	MarkCompanyBillingStatus(context.Context, *MarkCompanyBillingStatusRequest) (*CommonResponse, error)
	//Company Request End
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*CommonResponse, error)
	VerifyOTP(context.Context, *VerifyOTPRequest) (*VerifyOTPResponse, error)
	SearchUsers(context.Context, *SearchUserRequest) (*GetUsersReponse, error)
	GetUserById(context.Context, *GetUserRequest) (*GetUserReponse, error)
	//Admin
	AdminLogin(context.Context, *AdminLoginRequest) (*AdminLoginResponse, error)
	AdminVerify(context.Context, *AdminVerifyRequest) (*AdminVerifyResponse, error)
	AdminCreateUser(context.Context, *AdminCreateUserRequest) (*CreateUserResponse, error)
	AdminUpdateUser(context.Context, *AdminUpdateUserRequest) (*CommonResponse, error)
	//Wallet
	CreditWallet(context.Context, *WalletTxnRequest) (*TxnResponse, error)
	DebitWallet(context.Context, *WalletTxnRequest) (*TxnResponse, error)
	GetTxns(context.Context, *GetTxnRequest) (*GetTxnsResponse, error)
	GetTxnById(context.Context, *GetTxnRequest) (*GetTxnResponse, error)
	//Address Methods
	CreateAddress(context.Context, *CreateAddressRequest) (*CreateAddressResponse, error)
	UpdateAddress(context.Context, *UpdateAddressRequest) (*UpdateAddressResponse, error)
	UpdateAddressLocation(context.Context, *UpdateAddressLocationRequest) (*UpdateAddressResponse, error)
	UpdateAddressStatus(context.Context, *UpdateAddressStatusRequest) (*UpdateAddressResponse, error)
	GetAddressesOfUser(context.Context, *GetAddressRequest) (*GetAddressesResponse, error)
	GetAddressById(context.Context, *GetAddressRequest) (*GetAddressResponse, error)
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) CreateCompany(context.Context, *CreateCompanyRequest) (*CreateCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompany not implemented")
}
func (UnimplementedAccountServiceServer) LoginCompany(context.Context, *LoginCompanyRequest) (*LoginCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginCompany not implemented")
}
func (UnimplementedAccountServiceServer) VerifyCompanyOTP(context.Context, *VerifyCompanyOTPRequest) (*VerifyCompanyOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCompanyOTP not implemented")
}
func (UnimplementedAccountServiceServer) UpdateCompany(context.Context, *UpdateCompanyRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompany not implemented")
}
func (UnimplementedAccountServiceServer) CompanyPasswordReset(context.Context, *CompanyPasswordResetRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyPasswordReset not implemented")
}
func (UnimplementedAccountServiceServer) GetCompany(context.Context, *GetCompanyRequest) (*GetCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompany not implemented")
}
func (UnimplementedAccountServiceServer) GetCompanies(context.Context, *GetCompanyRequest) (*GetCompaniesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanies not implemented")
}
func (UnimplementedAccountServiceServer) UpdateCompanySetting(context.Context, *UpdateCompanySettingRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompanySetting not implemented")
}
func (UnimplementedAccountServiceServer) GetRazorpayPlans(context.Context, *GetRazorPayPlansRequest) (*GetRazorPayPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRazorpayPlans not implemented")
}
func (UnimplementedAccountServiceServer) CreateCompanyBilling(context.Context, *CreateCompanyBillingRequest) (*CreateCompanyBillingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompanyBilling not implemented")
}
func (UnimplementedAccountServiceServer) ValidateCompanyBilling(context.Context, *ValidateCompanyBillingRequest) (*ValidateCompanyBillingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateCompanyBilling not implemented")
}
func (UnimplementedAccountServiceServer) MarkCompanyBillingStatus(context.Context, *MarkCompanyBillingStatusRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkCompanyBillingStatus not implemented")
}
func (UnimplementedAccountServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAccountServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAccountServiceServer) VerifyOTP(context.Context, *VerifyOTPRequest) (*VerifyOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOTP not implemented")
}
func (UnimplementedAccountServiceServer) SearchUsers(context.Context, *SearchUserRequest) (*GetUsersReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsers not implemented")
}
func (UnimplementedAccountServiceServer) GetUserById(context.Context, *GetUserRequest) (*GetUserReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedAccountServiceServer) AdminLogin(context.Context, *AdminLoginRequest) (*AdminLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogin not implemented")
}
func (UnimplementedAccountServiceServer) AdminVerify(context.Context, *AdminVerifyRequest) (*AdminVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminVerify not implemented")
}
func (UnimplementedAccountServiceServer) AdminCreateUser(context.Context, *AdminCreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateUser not implemented")
}
func (UnimplementedAccountServiceServer) AdminUpdateUser(context.Context, *AdminUpdateUserRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateUser not implemented")
}
func (UnimplementedAccountServiceServer) CreditWallet(context.Context, *WalletTxnRequest) (*TxnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditWallet not implemented")
}
func (UnimplementedAccountServiceServer) DebitWallet(context.Context, *WalletTxnRequest) (*TxnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebitWallet not implemented")
}
func (UnimplementedAccountServiceServer) GetTxns(context.Context, *GetTxnRequest) (*GetTxnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxns not implemented")
}
func (UnimplementedAccountServiceServer) GetTxnById(context.Context, *GetTxnRequest) (*GetTxnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxnById not implemented")
}
func (UnimplementedAccountServiceServer) CreateAddress(context.Context, *CreateAddressRequest) (*CreateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddress not implemented")
}
func (UnimplementedAccountServiceServer) UpdateAddress(context.Context, *UpdateAddressRequest) (*UpdateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddress not implemented")
}
func (UnimplementedAccountServiceServer) UpdateAddressLocation(context.Context, *UpdateAddressLocationRequest) (*UpdateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddressLocation not implemented")
}
func (UnimplementedAccountServiceServer) UpdateAddressStatus(context.Context, *UpdateAddressStatusRequest) (*UpdateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddressStatus not implemented")
}
func (UnimplementedAccountServiceServer) GetAddressesOfUser(context.Context, *GetAddressRequest) (*GetAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressesOfUser not implemented")
}
func (UnimplementedAccountServiceServer) GetAddressById(context.Context, *GetAddressRequest) (*GetAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressById not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_CreateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/CreateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateCompany(ctx, req.(*CreateCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_LoginCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).LoginCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/LoginCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).LoginCompany(ctx, req.(*LoginCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_VerifyCompanyOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCompanyOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).VerifyCompanyOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/VerifyCompanyOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).VerifyCompanyOTP(ctx, req.(*VerifyCompanyOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/UpdateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateCompany(ctx, req.(*UpdateCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_CompanyPasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyPasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CompanyPasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/CompanyPasswordReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CompanyPasswordReset(ctx, req.(*CompanyPasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/GetCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetCompany(ctx, req.(*GetCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/GetCompanies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetCompanies(ctx, req.(*GetCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateCompanySetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompanySettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateCompanySetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/UpdateCompanySetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateCompanySetting(ctx, req.(*UpdateCompanySettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetRazorpayPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRazorPayPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetRazorpayPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/GetRazorpayPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetRazorpayPlans(ctx, req.(*GetRazorPayPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_CreateCompanyBilling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompanyBillingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateCompanyBilling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/CreateCompanyBilling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateCompanyBilling(ctx, req.(*CreateCompanyBillingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_ValidateCompanyBilling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateCompanyBillingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).ValidateCompanyBilling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/ValidateCompanyBilling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).ValidateCompanyBilling(ctx, req.(*ValidateCompanyBillingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_MarkCompanyBillingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkCompanyBillingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).MarkCompanyBillingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/MarkCompanyBillingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).MarkCompanyBillingStatus(ctx, req.(*MarkCompanyBillingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_VerifyOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).VerifyOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/VerifyOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).VerifyOTP(ctx, req.(*VerifyOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/SearchUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).SearchUsers(ctx, req.(*SearchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/GetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetUserById(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_AdminLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).AdminLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/AdminLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).AdminLogin(ctx, req.(*AdminLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_AdminVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).AdminVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/AdminVerify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).AdminVerify(ctx, req.(*AdminVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_AdminCreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).AdminCreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/AdminCreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).AdminCreateUser(ctx, req.(*AdminCreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_AdminUpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).AdminUpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/AdminUpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).AdminUpdateUser(ctx, req.(*AdminUpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_CreditWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletTxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreditWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/CreditWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreditWallet(ctx, req.(*WalletTxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_DebitWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletTxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).DebitWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/DebitWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).DebitWallet(ctx, req.(*WalletTxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetTxns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetTxns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/GetTxns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetTxns(ctx, req.(*GetTxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetTxnById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetTxnById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/GetTxnById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetTxnById(ctx, req.(*GetTxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_CreateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/CreateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateAddress(ctx, req.(*CreateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/UpdateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateAddress(ctx, req.(*UpdateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateAddressLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAddressLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateAddressLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/UpdateAddressLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateAddressLocation(ctx, req.(*UpdateAddressLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateAddressStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAddressStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateAddressStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/UpdateAddressStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateAddressStatus(ctx, req.(*UpdateAddressStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAddressesOfUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAddressesOfUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/GetAddressesOfUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAddressesOfUser(ctx, req.(*GetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAddressById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAddressById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/justify.AccountService/GetAddressById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAddressById(ctx, req.(*GetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "justify.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCompany",
			Handler:    _AccountService_CreateCompany_Handler,
		},
		{
			MethodName: "LoginCompany",
			Handler:    _AccountService_LoginCompany_Handler,
		},
		{
			MethodName: "VerifyCompanyOTP",
			Handler:    _AccountService_VerifyCompanyOTP_Handler,
		},
		{
			MethodName: "UpdateCompany",
			Handler:    _AccountService_UpdateCompany_Handler,
		},
		{
			MethodName: "CompanyPasswordReset",
			Handler:    _AccountService_CompanyPasswordReset_Handler,
		},
		{
			MethodName: "GetCompany",
			Handler:    _AccountService_GetCompany_Handler,
		},
		{
			MethodName: "GetCompanies",
			Handler:    _AccountService_GetCompanies_Handler,
		},
		{
			MethodName: "UpdateCompanySetting",
			Handler:    _AccountService_UpdateCompanySetting_Handler,
		},
		{
			MethodName: "GetRazorpayPlans",
			Handler:    _AccountService_GetRazorpayPlans_Handler,
		},
		{
			MethodName: "CreateCompanyBilling",
			Handler:    _AccountService_CreateCompanyBilling_Handler,
		},
		{
			MethodName: "ValidateCompanyBilling",
			Handler:    _AccountService_ValidateCompanyBilling_Handler,
		},
		{
			MethodName: "MarkCompanyBillingStatus",
			Handler:    _AccountService_MarkCompanyBillingStatus_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _AccountService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _AccountService_UpdateUser_Handler,
		},
		{
			MethodName: "VerifyOTP",
			Handler:    _AccountService_VerifyOTP_Handler,
		},
		{
			MethodName: "SearchUsers",
			Handler:    _AccountService_SearchUsers_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _AccountService_GetUserById_Handler,
		},
		{
			MethodName: "AdminLogin",
			Handler:    _AccountService_AdminLogin_Handler,
		},
		{
			MethodName: "AdminVerify",
			Handler:    _AccountService_AdminVerify_Handler,
		},
		{
			MethodName: "AdminCreateUser",
			Handler:    _AccountService_AdminCreateUser_Handler,
		},
		{
			MethodName: "AdminUpdateUser",
			Handler:    _AccountService_AdminUpdateUser_Handler,
		},
		{
			MethodName: "CreditWallet",
			Handler:    _AccountService_CreditWallet_Handler,
		},
		{
			MethodName: "DebitWallet",
			Handler:    _AccountService_DebitWallet_Handler,
		},
		{
			MethodName: "GetTxns",
			Handler:    _AccountService_GetTxns_Handler,
		},
		{
			MethodName: "GetTxnById",
			Handler:    _AccountService_GetTxnById_Handler,
		},
		{
			MethodName: "CreateAddress",
			Handler:    _AccountService_CreateAddress_Handler,
		},
		{
			MethodName: "UpdateAddress",
			Handler:    _AccountService_UpdateAddress_Handler,
		},
		{
			MethodName: "UpdateAddressLocation",
			Handler:    _AccountService_UpdateAddressLocation_Handler,
		},
		{
			MethodName: "UpdateAddressStatus",
			Handler:    _AccountService_UpdateAddressStatus_Handler,
		},
		{
			MethodName: "GetAddressesOfUser",
			Handler:    _AccountService_GetAddressesOfUser_Handler,
		},
		{
			MethodName: "GetAddressById",
			Handler:    _AccountService_GetAddressById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}
